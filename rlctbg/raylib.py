# -*- encoding: utf-8 -*-

# ============================================================================ #
#                                   WARNING                                    #
# ---------------------------------------------------------------------------- #
#                           DO NOT MODIFY THIS FILE                            #
#                                                                              #
#                   This file is generated by source code.                     #
#                   Changes in the source will not persist.                    #
# ============================================================================ #


import sys
import os
import platform
import ctypes
from enum import IntEnum, auto
from ctypes import (
    c_bool,
    c_char_p,
    c_char,
    c_byte,
    c_ubyte,
    c_int,
    c_uint,
    c_short,
    c_ushort,
    c_long,
    c_ulong,
    c_void_p,
    # c_ssize_t,
    # c_size_t,
    c_float,
    c_double,
    CFUNCTYPE,
    POINTER,
    CDLL,
    WinDLL,
    Structure,
    byref,
)

# region LIBRARY LOADER

_lib_fname = {
    'win32': 'raylib.dll',
    'linux': 'libraylib.so.2.5.0',
    'darwin': 'libraylib.2.5.0.dylib'
}

_lib_platform = sys.platform

if _lib_platform == 'win32':
    _bitness = platform.architecture()[0]
else:
    _bitness = '64bit' if sys.maxsize > 2 ** 32 else '32bit'

_lib_fname_abspath = os.path.join(os.path.dirname(os.path.abspath(__file__)), _lib_fname[_lib_platform])
_lib_fname_abspath = os.path.normcase(os.path.normpath(_lib_fname_abspath))

print(
    """Library loading info:
    platform: {}
    arch: {}
    absolute path: {}
    exists: {}
    is file: {}
    """.format(
        _lib_platform,
        _bitness,
        _lib_fname_abspath,
        'yes' if os.path.exists(_lib_fname_abspath) else 'no',
        'yes' if os.path.isfile(_lib_fname_abspath) else 'no'
    )
)

_rl = None
if _lib_platform == 'win32':
    from ctypes import wintypes

    DONT_RESOLVE_DLL_REFERENCES = 0x00000001
    LOAD_LIBRARY_AS_DATAFILE = 0x00000002
    LOAD_WITH_ALTERED_SEARCH_PATH = 0x00000008
    LOAD_IGNORE_CODE_AUTHZ_LEVEL = 0x00000010  # NT 6.1
    LOAD_LIBRARY_AS_IMAGE_RESOURCE = 0x00000020  # NT 6.0
    LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 0x00000040  # NT 6.0
    
    # These cannot be combined with LOAD_WITH_ALTERED_SEARCH_PATH.
    # Install update KB2533623 for NT 6.0 & 6.1.
    LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = 0x00000100
    LOAD_LIBRARY_SEARCH_APPLICATION_DIR = 0x00000200
    LOAD_LIBRARY_SEARCH_USER_DIRS = 0x00000400
    LOAD_LIBRARY_SEARCH_SYSTEM32 = 0x00000800
    LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = 0x00001000

    kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)

    def check_bool(result, func, args):
        if not result:
            raise ctypes.WinError(ctypes.get_last_error())
        return args

    kernel32.LoadLibraryExW.errcheck = check_bool
    kernel32.LoadLibraryExW.restype = wintypes.HMODULE
    kernel32.LoadLibraryExW.argtypes = (wintypes.LPCWSTR,
                                        wintypes.HANDLE,
                                        wintypes.DWORD)


    class CDLLEx(ctypes.CDLL):
        def __init__(self, name, mode=0, handle=None,
                     use_errno=True, use_last_error=False):
            if handle is None:
                handle = kernel32.LoadLibraryExW(name, None, mode)
            super(CDLLEx, self).__init__(name, mode, handle,
                                         use_errno, use_last_error)


    class WinDLLEx(WinDLL):
        def __init__(self, name, mode=0, handle=None,
                     use_errno=False, use_last_error=True):
            if handle is None:
                handle = kernel32.LoadLibraryExW(name, None, mode)
            super(WinDLLEx, self).__init__(name, mode, handle,
                                           use_errno, use_last_error)


    try:
        _rl = CDLLEx(_lib_fname_abspath, LOAD_WITH_ALTERED_SEARCH_PATH)
    except OSError:
        print("Unable to load raylib 2.5.0 dll.")
        _rl = None
else:
    _rl = CDLL(_lib_fname_abspath)

if _rl is None:
    print("Failed to load shared library.")
    exit()

# endregion (library loader)

__all__ = [
    'PI',
    'DEG2RAD',
    'RAD2DEG',
    'MAX_TOUCH_POINTS',
    'Vector2',
    'Vector3',
    'Vector4',
    'Quaternion',
    'Matrix',
    'Color',
    'Rectangle',
    'Image',
    'Texture2D',
    'Texture',
    'TextureCubemap',
    'RenderTexture2D',
    'RenderTexture',
    'NPatchInfo',
    'CharInfo',
    'Font',
    'SpriteFont',
    'Camera3D',
    'Camera',
    'Camera2D',
    'Mesh',
    'Shader',
    'MaterialMap',
    'Material',
    'Transform',
    'BoneInfo',
    'Model',
    'ModelAnimation',
    'Ray',
    'RayHitInfo',
    'BoundingBox',
    'Wave',
    'rAudioBuffer',
    'AudioStream',
    'Sound',
    'Music',
    'VrDeviceInfo',
    'ConfigFlag',
    'FLAG_RESERVED',
    'FLAG_FULLSCREEN_MODE',
    'FLAG_WINDOW_RESIZABLE',
    'FLAG_WINDOW_UNDECORATED',
    'FLAG_WINDOW_TRANSPARENT',
    'FLAG_WINDOW_HIDDEN',
    'FLAG_WINDOW_ALWAYS_RUN',
    'FLAG_MSAA_4X_HINT',
    'FLAG_VSYNC_HINT',
    'TraceLogType',
    'LOG_ALL',
    'LOG_TRACE',
    'LOG_DEBUG',
    'LOG_INFO',
    'LOG_WARNING',
    'LOG_ERROR',
    'LOG_FATAL',
    'LOG_NONE',
    'KeyboardKey',
    'KEY_APOSTROPHE',
    'KEY_COMMA',
    'KEY_MINUS',
    'KEY_PERIOD',
    'KEY_SLASH',
    'KEY_ZERO',
    'KEY_ONE',
    'KEY_TWO',
    'KEY_THREE',
    'KEY_FOUR',
    'KEY_FIVE',
    'KEY_SIX',
    'KEY_SEVEN',
    'KEY_EIGHT',
    'KEY_NINE',
    'KEY_SEMICOLON',
    'KEY_EQUAL',
    'KEY_A',
    'KEY_B',
    'KEY_C',
    'KEY_D',
    'KEY_E',
    'KEY_F',
    'KEY_G',
    'KEY_H',
    'KEY_I',
    'KEY_J',
    'KEY_K',
    'KEY_L',
    'KEY_M',
    'KEY_N',
    'KEY_O',
    'KEY_P',
    'KEY_Q',
    'KEY_R',
    'KEY_S',
    'KEY_T',
    'KEY_U',
    'KEY_V',
    'KEY_W',
    'KEY_X',
    'KEY_Y',
    'KEY_Z',
    'KEY_SPACE',
    'KEY_ESCAPE',
    'KEY_ENTER',
    'KEY_TAB',
    'KEY_BACKSPACE',
    'KEY_INSERT',
    'KEY_DELETE',
    'KEY_RIGHT',
    'KEY_LEFT',
    'KEY_DOWN',
    'KEY_UP',
    'KEY_PAGE_UP',
    'KEY_PAGE_DOWN',
    'KEY_HOME',
    'KEY_END',
    'KEY_CAPS_LOCK',
    'KEY_SCROLL_LOCK',
    'KEY_NUM_LOCK',
    'KEY_PRINT_SCREEN',
    'KEY_PAUSE',
    'KEY_F1',
    'KEY_F2',
    'KEY_F3',
    'KEY_F4',
    'KEY_F5',
    'KEY_F6',
    'KEY_F7',
    'KEY_F8',
    'KEY_F9',
    'KEY_F10',
    'KEY_F11',
    'KEY_F12',
    'KEY_LEFT_SHIFT',
    'KEY_LEFT_CONTROL',
    'KEY_LEFT_ALT',
    'KEY_LEFT_SUPER',
    'KEY_RIGHT_SHIFT',
    'KEY_RIGHT_CONTROL',
    'KEY_RIGHT_ALT',
    'KEY_RIGHT_SUPER',
    'KEY_KB_MENU',
    'KEY_LEFT_BRACKET',
    'KEY_BACKSLASH',
    'KEY_RIGHT_BRACKET',
    'KEY_GRAVE',
    'KEY_KP_0',
    'KEY_KP_1',
    'KEY_KP_2',
    'KEY_KP_3',
    'KEY_KP_4',
    'KEY_KP_5',
    'KEY_KP_6',
    'KEY_KP_7',
    'KEY_KP_8',
    'KEY_KP_9',
    'KEY_KP_DECIMAL',
    'KEY_KP_DIVIDE',
    'KEY_KP_MULTIPLY',
    'KEY_KP_SUBTRACT',
    'KEY_KP_ADD',
    'KEY_KP_ENTER',
    'KEY_KP_EQUAL',
    'AndroidButton',
    'KEY_BACK',
    'KEY_MENU',
    'KEY_VOLUME_UP',
    'KEY_VOLUME_DOWN',
    'MouseButton',
    'MOUSE_LEFT_BUTTON',
    'MOUSE_RIGHT_BUTTON',
    'MOUSE_MIDDLE_BUTTON',
    'GamepadNumber',
    'GAMEPAD_PLAYER1',
    'GAMEPAD_PLAYER2',
    'GAMEPAD_PLAYER3',
    'GAMEPAD_PLAYER4',
    'GamepadButton',
    'GAMEPAD_BUTTON_UNKNOWN',
    'GAMEPAD_BUTTON_LEFT_FACE_UP',
    'GAMEPAD_BUTTON_LEFT_FACE_RIGHT',
    'GAMEPAD_BUTTON_LEFT_FACE_DOWN',
    'GAMEPAD_BUTTON_LEFT_FACE_LEFT',
    'GAMEPAD_BUTTON_RIGHT_FACE_UP',
    'GAMEPAD_BUTTON_RIGHT_FACE_RIGHT',
    'GAMEPAD_BUTTON_RIGHT_FACE_DOWN',
    'GAMEPAD_BUTTON_RIGHT_FACE_LEFT',
    'GAMEPAD_BUTTON_LEFT_TRIGGER_1',
    'GAMEPAD_BUTTON_LEFT_TRIGGER_2',
    'GAMEPAD_BUTTON_RIGHT_TRIGGER_1',
    'GAMEPAD_BUTTON_RIGHT_TRIGGER_2',
    'GAMEPAD_BUTTON_MIDDLE_LEFT',
    'GAMEPAD_BUTTON_MIDDLE',
    'GAMEPAD_BUTTON_MIDDLE_RIGHT',
    'GAMEPAD_BUTTON_LEFT_THUMB',
    'GAMEPAD_BUTTON_RIGHT_THUMB',
    'GamepadAxis',
    'GAMEPAD_AXIS_UNKNOWN',
    'GAMEPAD_AXIS_LEFT_X',
    'GAMEPAD_AXIS_LEFT_Y',
    'GAMEPAD_AXIS_RIGHT_X',
    'GAMEPAD_AXIS_RIGHT_Y',
    'GAMEPAD_AXIS_LEFT_TRIGGER',
    'GAMEPAD_AXIS_RIGHT_TRIGGER',
    'ShaderLocationIndex',
    'LOC_VERTEX_POSITION',
    'LOC_VERTEX_TEXCOORD01',
    'LOC_VERTEX_TEXCOORD02',
    'LOC_VERTEX_NORMAL',
    'LOC_VERTEX_TANGENT',
    'LOC_VERTEX_COLOR',
    'LOC_MATRIX_MVP',
    'LOC_MATRIX_MODEL',
    'LOC_MATRIX_VIEW',
    'LOC_MATRIX_PROJECTION',
    'LOC_VECTOR_VIEW',
    'LOC_COLOR_DIFFUSE',
    'LOC_COLOR_SPECULAR',
    'LOC_COLOR_AMBIENT',
    'LOC_MAP_ALBEDO',
    'LOC_MAP_METALNESS',
    'LOC_MAP_NORMAL',
    'LOC_MAP_ROUGHNESS',
    'LOC_MAP_OCCLUSION',
    'LOC_MAP_EMISSION',
    'LOC_MAP_HEIGHT',
    'LOC_MAP_CUBEMAP',
    'LOC_MAP_IRRADIANCE',
    'LOC_MAP_PREFILTER',
    'LOC_MAP_BRDF',
    'LOC_MAP_DIFFUSE',
    'LOC_MAP_SPECULAR',
    'ShaderUniformDataType',
    'UNIFORM_FLOAT',
    'UNIFORM_VEC2',
    'UNIFORM_VEC3',
    'UNIFORM_VEC4',
    'UNIFORM_INT',
    'UNIFORM_IVEC2',
    'UNIFORM_IVEC3',
    'UNIFORM_IVEC4',
    'UNIFORM_SAMPLER2D',
    'MaterialMapType',
    'MAP_ALBEDO',
    'MAP_METALNESS',
    'MAP_NORMAL',
    'MAP_ROUGHNESS',
    'MAP_OCCLUSION',
    'MAP_EMISSION',
    'MAP_HEIGHT',
    'MAP_CUBEMAP',
    'MAP_IRRADIANCE',
    'MAP_PREFILTER',
    'MAP_BRDF',
    'MAP_DIFFUSE',
    'MAP_SPECULAR',
    'PixelFormat',
    'UNCOMPRESSED_GRAYSCALE',
    'UNCOMPRESSED_GRAY_ALPHA',
    'UNCOMPRESSED_R5G6B5',
    'UNCOMPRESSED_R8G8B8',
    'UNCOMPRESSED_R5G5B5A1',
    'UNCOMPRESSED_R4G4B4A4',
    'UNCOMPRESSED_R8G8B8A8',
    'UNCOMPRESSED_R32',
    'UNCOMPRESSED_R32G32B32',
    'UNCOMPRESSED_R32G32B32A32',
    'UNCOMPRESSED_DXT1_RGB',
    'UNCOMPRESSED_DXT1_RGBA',
    'UNCOMPRESSED_DXT3_RGBA',
    'UNCOMPRESSED_DXT5_RGBA',
    'UNCOMPRESSED_ETC1_RGB',
    'UNCOMPRESSED_ETC2_RGB',
    'UNCOMPRESSED_ETC2_EAC_RGBA',
    'UNCOMPRESSED_PVRT_RGB',
    'UNCOMPRESSED_PVRT_RGBA',
    'UNCOMPRESSED_ASTC_4x4_RGBA',
    'UNCOMPRESSED_ASTC_8x8_RGBA',
    'TextureFilterMode',
    'FILTER_POINT',
    'FILTER_BILINEAR',
    'FILTER_TRILINEAR',
    'FILTER_ANISOTROPIC_4X',
    'FILTER_ANISOTROPIC_8X',
    'FILTER_ANISOTROPIC_16X',
    'CubemapLayoutType',
    'CUBEMAP_AUTO_DETECT',
    'CUBEMAP_LINE_VERTICAL',
    'CUBEMAP_LINE_HORIZONTAL',
    'CUBEMAP_CROSS_THREE_BY_FOUR',
    'CUBEMAP_CROSS_FOUR_BY_THREE',
    'CUBEMAP_PANORAMA',
    'TextureWrapMode',
    'WRAP_REPEAT',
    'WRAP_CLAMP',
    'WRAP_MIRROR_REPEAT',
    'WRAP_MIRROR_CLAMP',
    'FontType',
    'FONT_DEFAULT',
    'FONT_BITMAP',
    'FONT_SDF',
    'BlendMode',
    'BLEND_ALPHA',
    'BLEND_ADDITIVE',
    'BLEND_MULTIPLIED',
    'GestureType',
    'GESTURE_NONE',
    'GESTURE_TAP',
    'GESTURE_DOUBLETAP',
    'GESTURE_HOLD',
    'GESTURE_DRAG',
    'GESTURE_SWIPE_RIGHT',
    'GESTURE_SWIPE_LEFT',
    'GESTURE_SWIPE_UP',
    'GESTURE_SWIPE_DOWN',
    'GESTURE_PINCH_IN',
    'GESTURE_PINCH_OUT',
    'CameraMode',
    'CAMERA_CUSTOM',
    'CAMERA_FREE',
    'CAMERA_ORBITAL',
    'CAMERA_FIRST_PERSON',
    'CAMERA_THIRD_PERSON',
    'CameraType',
    'CAMERA_PERSPECTIVE',
    'CAMERA_ORTHOGRAPHIC',
    'NPatchType',
    'NPT_9PATCH',
    'NPT_3PATCH_VERTICAL',
    'NPT_3PATCH_HORIZONTAL',
    'TraceLogCallback',
    'init_window',
    'window_should_close',
    'close_window',
    'is_window_ready',
    'is_window_minimized',
    'is_window_resized',
    'is_window_hidden',
    'toggle_fullscreen',
    'unhide_window',
    'hide_window',
    'set_window_icon',
    'set_window_title',
    'set_window_position',
    'set_window_monitor',
    'set_window_min_size',
    'set_window_size',
    'get_window_handle',
    'get_screen_width',
    'get_screen_height',
    'get_monitor_count',
    'get_monitor_width',
    'get_monitor_height',
    'get_monitor_physical_width',
    'get_monitor_physical_height',
    'get_window_position',
    'get_monitor_name',
    'get_clipboard_text',
    'set_clipboard_text',
    'show_cursor',
    'hide_cursor',
    'is_cursor_hidden',
    'enable_cursor',
    'disable_cursor',
    'clear_background',
    'begin_drawing',
    'end_drawing',
    'begin_mode2_d',
    'end_mode2_d',
    'begin_mode3_d',
    'end_mode3_d',
    'begin_texture_mode',
    'end_texture_mode',
    'begin_scissor_mode',
    'end_scissor_mode',
    'get_mouse_ray',
    'get_camera_matrix',
    'get_camera_matrix2_d',
    'get_world_to_screen',
    'get_world_to_screen2_d',
    'get_screen_to_world2_d',
    'set_target_fps',
    'get_fps',
    'get_frame_time',
    'get_time',
    'color_to_int',
    'color_normalize',
    'color_from_normalized',
    'color_to_hsv',
    'color_from_hsv',
    'get_color',
    'fade',
    'set_config_flags',
    'set_trace_log_level',
    'set_trace_log_exit',
    'set_trace_log_callback',
    'trace_log',
    'take_screenshot',
    'get_random_value',
    'file_exists',
    'is_file_extension',
    'directory_exists',
    'get_extension',
    'get_file_name',
    'get_file_name_without_ext',
    'get_directory_path',
    'get_prev_directory_path',
    'get_working_directory',
    'get_directory_files',
    'clear_directory_files',
    'change_directory',
    'is_file_dropped',
    'get_dropped_files',
    'clear_dropped_files',
    'get_file_mod_time',
    'compress_data',
    'decompress_data',
    'storage_save_value',
    'storage_load_value',
    'open_url',
    'is_key_pressed',
    'is_key_down',
    'is_key_released',
    'is_key_up',
    'set_exit_key',
    'get_key_pressed',
    'is_gamepad_available',
    'is_gamepad_name',
    'get_gamepad_name',
    'is_gamepad_button_pressed',
    'is_gamepad_button_down',
    'is_gamepad_button_released',
    'is_gamepad_button_up',
    'get_gamepad_button_pressed',
    'get_gamepad_axis_count',
    'get_gamepad_axis_movement',
    'is_mouse_button_pressed',
    'is_mouse_button_down',
    'is_mouse_button_released',
    'is_mouse_button_up',
    'get_mouse_x',
    'get_mouse_y',
    'get_mouse_position',
    'set_mouse_position',
    'set_mouse_offset',
    'set_mouse_scale',
    'get_mouse_wheel_move',
    'get_touch_x',
    'get_touch_y',
    'get_touch_position',
    'set_gestures_enabled',
    'is_gesture_detected',
    'get_gesture_detected',
    'get_touch_points_count',
    'get_gesture_hold_duration',
    'get_gesture_drag_vector',
    'get_gesture_drag_angle',
    'get_gesture_pinch_vector',
    'get_gesture_pinch_angle',
    'set_camera_mode',
    'update_camera',
    'set_camera_pan_control',
    'set_camera_alt_control',
    'set_camera_smooth_zoom_control',
    'set_camera_move_controls',
    'draw_pixel',
    'draw_pixel_v',
    'draw_line',
    'draw_line_v',
    'draw_line_ex',
    'draw_line_bezier',
    'draw_line_strip',
    'draw_circle',
    'draw_circle_sector',
    'draw_circle_sector_lines',
    'draw_circle_gradient',
    'draw_circle_v',
    'draw_circle_lines',
    'draw_ring',
    'draw_ring_lines',
    'draw_rectangle',
    'draw_rectangle_v',
    'draw_rectangle_rec',
    'draw_rectangle_pro',
    'draw_rectangle_gradient_v',
    'draw_rectangle_gradient_h',
    'draw_rectangle_gradient_ex',
    'draw_rectangle_lines',
    'draw_rectangle_lines_ex',
    'draw_rectangle_rounded',
    'draw_rectangle_rounded_lines',
    'draw_triangle',
    'draw_triangle_lines',
    'draw_triangle_fan',
    'draw_triangle_strip',
    'draw_poly',
    'draw_poly_lines',
    'set_shapes_texture',
    'check_collision_recs',
    'check_collision_circles',
    'check_collision_circle_rec',
    'get_collision_rec',
    'check_collision_point_rec',
    'check_collision_point_circle',
    'check_collision_point_triangle',
    'load_image',
    'load_image_ex',
    'load_image_pro',
    'load_image_raw',
    'export_image',
    'export_image_as_code',
    'load_texture',
    'load_texture_from_image',
    'load_texture_cubemap',
    'load_render_texture',
    'unload_image',
    'unload_texture',
    'unload_render_texture',
    'get_image_data',
    'get_image_data_normalized',
    'get_image_alpha_border',
    'get_pixel_data_size',
    'get_texture_data',
    'get_screen_data',
    'update_texture',
    'image_copy',
    'image_from_image',
    'image_to_pot',
    'image_format',
    'image_alpha_mask',
    'image_alpha_clear',
    'image_alpha_crop',
    'image_alpha_premultiply',
    'image_crop',
    'image_resize',
    'image_resize_nn',
    'image_resize_canvas',
    'image_mipmaps',
    'image_dither',
    'image_extract_palette',
    'image_text',
    'image_text_ex',
    'image_draw',
    'image_draw_rectangle',
    'image_draw_rectangle_lines',
    'image_draw_text',
    'image_draw_text_ex',
    'image_flip_vertical',
    'image_flip_horizontal',
    'image_rotate_cw',
    'image_rotate_ccw',
    'image_color_tint',
    'image_color_invert',
    'image_color_grayscale',
    'image_color_contrast',
    'image_color_brightness',
    'image_color_replace',
    'gen_image_color',
    'gen_image_gradient_v',
    'gen_image_gradient_h',
    'gen_image_gradient_radial',
    'gen_image_checked',
    'gen_image_white_noise',
    'gen_image_perlin_noise',
    'gen_image_cellular',
    'gen_texture_mipmaps',
    'set_texture_filter',
    'set_texture_wrap',
    'draw_texture',
    'draw_texture_v',
    'draw_texture_ex',
    'draw_texture_rec',
    'draw_texture_quad',
    'draw_texture_pro',
    'draw_texture_npatch',
    'get_font_default',
    'load_font',
    'load_font_ex',
    'load_font_from_image',
    'load_font_data',
    'gen_image_font_atlas',
    'unload_font',
    'draw_fps',
    'draw_text',
    'draw_text_ex',
    'draw_text_rec',
    'draw_text_codepoint',
    'measure_text',
    'measure_text_ex',
    'get_glyph_index',
    'text_is_equal',
    'text_length',
    'text_format',
    'text_subtext',
    'text_replace',
    'text_insert',
    'text_join',
    'text_split',
    'text_append',
    'text_find_index',
    'text_to_upper',
    'text_to_lower',
    'text_to_pascal',
    'text_to_integer',
    'text_to_utf8',
    'get_codepoints',
    'get_codepoints_count',
    'get_next_codepoint',
    'codepoint_to_utf8',
    'draw_line3_d',
    'draw_circle3_d',
    'draw_cube',
    'draw_cube_v',
    'draw_cube_wires',
    'draw_cube_wires_v',
    'draw_cube_texture',
    'draw_sphere',
    'draw_sphere_ex',
    'draw_sphere_wires',
    'draw_cylinder',
    'draw_cylinder_wires',
    'draw_plane',
    'draw_ray',
    'draw_grid',
    'draw_gizmo',
    'load_model',
    'load_model_from_mesh',
    'unload_model',
    'load_meshes',
    'export_mesh',
    'unload_mesh',
    'load_materials',
    'load_material_default',
    'unload_material',
    'set_material_texture',
    'set_model_mesh_material',
    'load_model_animations',
    'update_model_animation',
    'unload_model_animation',
    'is_model_animation_valid',
    'gen_mesh_poly',
    'gen_mesh_plane',
    'gen_mesh_cube',
    'gen_mesh_sphere',
    'gen_mesh_hemi_sphere',
    'gen_mesh_cylinder',
    'gen_mesh_torus',
    'gen_mesh_knot',
    'gen_mesh_heightmap',
    'gen_mesh_cubicmap',
    'mesh_bounding_box',
    'mesh_tangents',
    'mesh_binormals',
    'draw_model',
    'draw_model_ex',
    'draw_model_wires',
    'draw_model_wires_ex',
    'draw_bounding_box',
    'draw_billboard',
    'draw_billboard_rec',
    'check_collision_spheres',
    'check_collision_boxes',
    'check_collision_box_sphere',
    'check_collision_ray_sphere',
    'check_collision_ray_sphere_ex',
    'check_collision_ray_box',
    'get_collision_ray_model',
    'get_collision_ray_triangle',
    'get_collision_ray_ground',
    'load_text',
    'load_shader',
    'load_shader_code',
    'unload_shader',
    'get_shader_default',
    'get_texture_default',
    'get_shader_location',
    'set_shader_value',
    'set_shader_value_v',
    'set_shader_value_matrix',
    'set_shader_value_texture',
    'set_matrix_projection',
    'set_matrix_modelview',
    'get_matrix_modelview',
    'get_matrix_projection',
    'gen_texture_cubemap',
    'gen_texture_irradiance',
    'gen_texture_prefilter',
    'gen_texture_brdf',
    'begin_shader_mode',
    'end_shader_mode',
    'begin_blend_mode',
    'end_blend_mode',
    'init_vr_simulator',
    'close_vr_simulator',
    'update_vr_tracking',
    'set_vr_configuration',
    'is_vr_simulator_ready',
    'toggle_vr_mode',
    'begin_vr_drawing',
    'end_vr_drawing',
    'init_audio_device',
    'close_audio_device',
    'is_audio_device_ready',
    'set_master_volume',
    'load_wave',
    'load_sound',
    'load_sound_from_wave',
    'update_sound',
    'unload_wave',
    'unload_sound',
    'export_wave',
    'export_wave_as_code',
    'play_sound',
    'stop_sound',
    'pause_sound',
    'resume_sound',
    'play_sound_multi',
    'stop_sound_multi',
    'get_sounds_playing',
    'is_sound_playing',
    'set_sound_volume',
    'set_sound_pitch',
    'wave_format',
    'wave_copy',
    'wave_crop',
    'get_wave_data',
    'load_music_stream',
    'unload_music_stream',
    'play_music_stream',
    'update_music_stream',
    'stop_music_stream',
    'pause_music_stream',
    'resume_music_stream',
    'is_music_playing',
    'set_music_volume',
    'set_music_pitch',
    'set_music_loop_count',
    'get_music_time_length',
    'get_music_time_played',
    'init_audio_stream',
    'update_audio_stream',
    'close_audio_stream',
    'is_audio_stream_processed',
    'play_audio_stream',
    'pause_audio_stream',
    'resume_audio_stream',
    'is_audio_stream_playing',
    'stop_audio_stream',
    'set_audio_stream_volume',
    'set_audio_stream_pitch',
]

PI = 3.14159265358979323846
DEG2RAD = (PI/180.0)
RAD2DEG = (180.0/PI)
MAX_TOUCH_POINTS = 10


class Vector2(Structure):
    """Vector2 type"""
    _fields_ = [
       ('x', c_float),
       ('y', c_float),
    ]


class Vector3(Structure):
    """Vector3 type"""
    _fields_ = [
       ('x', c_float),
       ('y', c_float),
       ('z', c_float),
    ]


class Vector4(Structure):
    """Vector4 type"""
    _fields_ = [
       ('x', c_float),
       ('y', c_float),
       ('z', c_float),
       ('w', c_float),
    ]


Quaternion = Vector4


class Matrix(Structure):
    """Matrix type (OpenGL style 4x4 - right handed, column major)"""
    _fields_ = [
       ('m0', c_float),
       ('m4', c_float),
       ('m8', c_float),
       ('m12', c_float),
       ('m1', c_float),
       ('m5', c_float),
       ('m9', c_float),
       ('m13', c_float),
       ('m2', c_float),
       ('m6', c_float),
       ('m10', c_float),
       ('m14', c_float),
       ('m3', c_float),
       ('m7', c_float),
       ('m11', c_float),
       ('m15', c_float),
    ]


class Color(Structure):
    """Color type, RGBA (32bit)"""
    _fields_ = [
       ('r', c_ubyte),
       ('g', c_ubyte),
       ('b', c_ubyte),
       ('a', c_ubyte),
    ]


class Rectangle(Structure):
    """Rectangle type"""
    _fields_ = [
       ('x', c_float),
       ('y', c_float),
       ('width', c_float),
       ('height', c_float),
    ]


class Image(Structure):
    """NOTE: Data stored in CPU memory (RAM)"""
    _fields_ = [
       ('data', c_void_p),
       ('width', c_int),
       ('height', c_int),
       ('mipmaps', c_int),
       ('format', c_int),
    ]


class Texture2D(Structure):
    """NOTE: Data stored in GPU memory"""
    _fields_ = [
       ('id', c_uint),
       ('width', c_int),
       ('height', c_int),
       ('mipmaps', c_int),
       ('format', c_int),
    ]


Texture = Texture2D


TextureCubemap = Texture2D


class RenderTexture2D(Structure):
    """RenderTexture2D type, for texture rendering"""
    _fields_ = [
       ('id', c_uint),
       ('texture', Texture2D),
       ('depth', Texture2D),
       ('depthTexture', c_bool),
    ]


RenderTexture = RenderTexture2D


class NPatchInfo(Structure):
    """N-Patch layout info"""
    _fields_ = [
       ('sourceRec', Rectangle),
       ('left', c_int),
       ('top', c_int),
       ('right', c_int),
       ('bottom', c_int),
       ('type', c_int),
    ]


class CharInfo(Structure):
    """Font character info"""
    _fields_ = [
       ('value', c_int),
       ('offsetX', c_int),
       ('offsetY', c_int),
       ('advanceX', c_int),
       ('image', Image),
    ]


class Font(Structure):
    """Font type, includes texture and charSet array data"""
    _fields_ = [
       ('baseSize', c_int),
       ('charsCount', c_int),
       ('texture', Texture2D),
       ('recs', POINTER(Rectangle)),
       ('chars', POINTER(CharInfo)),
    ]


SpriteFont = Font


class Camera3D(Structure):
    """Camera type, defines a camera position/orientation in 3d space"""
    _fields_ = [
       ('position', Vector3),
       ('target', Vector3),
       ('up', Vector3),
       ('fovy', c_float),
       ('type', c_int),
    ]


Camera = Camera3D


class Camera2D(Structure):
    """Camera2D type, defines a 2d camera"""
    _fields_ = [
       ('offset', Vector2),
       ('target', Vector2),
       ('rotation', c_float),
       ('zoom', c_float),
    ]


class Mesh(Structure):
    """NOTE: Data stored in CPU memory (and GPU)"""
    _fields_ = [
       ('vertexCount', c_int),
       ('triangleCount', c_int),
       ('vertices', POINTER(c_float)),
       ('texcoords', POINTER(c_float)),
       ('texcoords2', POINTER(c_float)),
       ('normals', POINTER(c_float)),
       ('tangents', POINTER(c_float)),
       ('colors', POINTER(c_ubyte)),
       ('indices', POINTER(c_ushort)),
       ('animVertices', POINTER(c_float)),
       ('animNormals', POINTER(c_float)),
       ('boneIds', POINTER(c_int)),
       ('boneWeights', POINTER(c_float)),
       ('vaoId', c_uint),
       ('vboId', POINTER(c_uint)),
    ]


class Shader(Structure):
    """Shader type (generic)"""
    _fields_ = [
       ('id', c_uint),
       ('locs', POINTER(c_int)),
    ]


class MaterialMap(Structure):
    """Material texture map"""
    _fields_ = [
       ('texture', Texture2D),
       ('color', Color),
       ('value', c_float),
    ]


class Material(Structure):
    """Material type (generic)"""
    _fields_ = [
       ('shader', Shader),
       ('maps', POINTER(MaterialMap)),
       ('params', POINTER(c_float)),
    ]


class Transform(Structure):
    """Transformation properties"""
    _fields_ = [
       ('translation', Vector3),
       ('rotation', Quaternion),
       ('scale', Vector3),
    ]


class BoneInfo(Structure):
    """Bone information"""
    _fields_ = [
       ('name', c_char * 32),
       ('parent', c_int),
    ]


class Model(Structure):
    """Model type"""
    _fields_ = [
       ('transform', Matrix),
       ('meshCount', c_int),
       ('meshes', POINTER(Mesh)),
       ('materialCount', c_int),
       ('materials', POINTER(Material)),
       ('meshMaterial', POINTER(c_int)),
       ('boneCount', c_int),
       ('bones', POINTER(BoneInfo)),
       ('bindPose', POINTER(Transform)),
    ]


class ModelAnimation(Structure):
    """Model animation"""
    _fields_ = [
       ('boneCount', c_int),
       ('bones', POINTER(BoneInfo)),
       ('frameCount', c_int),
       ('framePoses', POINTER(POINTER(Transform))),
    ]


class Ray(Structure):
    """Ray type (useful for raycast)"""
    _fields_ = [
       ('position', Vector3),
       ('direction', Vector3),
    ]


class RayHitInfo(Structure):
    """Raycast hit information"""
    _fields_ = [
       ('hit', c_bool),
       ('distance', c_float),
       ('position', Vector3),
       ('normal', Vector3),
    ]


class BoundingBox(Structure):
    """Bounding box type"""
    _fields_ = [
       ('min', Vector3),
       ('max', Vector3),
    ]


class Wave(Structure):
    """Wave type, defines audio wave data"""
    _fields_ = [
       ('sampleCount', c_uint),
       ('sampleRate', c_uint),
       ('sampleSize', c_uint),
       ('channels', c_uint),
       ('data', c_void_p),
    ]


class rAudioBuffer(Structure):
    pass


class AudioStream(Structure):
    """NOTE: Useful to create custom audio streams not bound to a specific file"""
    _fields_ = [
       ('sampleRate', c_uint),
       ('sampleSize', c_uint),
       ('channels', c_uint),
       ('buffer', POINTER(rAudioBuffer)),
    ]


class Sound(Structure):
    """Sound source type"""
    _fields_ = [
       ('sampleCount', c_uint),
       ('stream', AudioStream),
    ]


class Music(Structure):
    """NOTE: Anything longer than ~10 seconds should be streamed"""
    _fields_ = [
       ('ctxType', c_int),
       ('ctxData', c_void_p),
       ('sampleCount', c_uint),
       ('loopCount', c_uint),
       ('stream', AudioStream),
    ]


class VrDeviceInfo(Structure):
    """Head-Mounted-Display device parameters"""
    _fields_ = [
       ('hResolution', c_int),
       ('vResolution', c_int),
       ('hScreenSize', c_float),
       ('vScreenSize', c_float),
       ('vScreenCenter', c_float),
       ('eyeToScreenDistance', c_float),
       ('lensSeparationDistance', c_float),
       ('interpupillaryDistance', c_float),
       ('lensDistortionValues', c_float * 4),
       ('chromaAbCorrection', c_float * 4),
    ]


class ConfigFlag(IntEnum):
    RESERVED = 1
    FULLSCREEN_MODE = 2
    WINDOW_RESIZABLE = 4
    WINDOW_UNDECORATED = 8
    WINDOW_TRANSPARENT = 16
    WINDOW_HIDDEN = 128
    WINDOW_ALWAYS_RUN = 256
    MSAA_4X_HINT = 32
    VSYNC_HINT = 64


FLAG_RESERVED = ConfigFlag.RESERVED
FLAG_FULLSCREEN_MODE = ConfigFlag.FULLSCREEN_MODE
FLAG_WINDOW_RESIZABLE = ConfigFlag.WINDOW_RESIZABLE
FLAG_WINDOW_UNDECORATED = ConfigFlag.WINDOW_UNDECORATED
FLAG_WINDOW_TRANSPARENT = ConfigFlag.WINDOW_TRANSPARENT
FLAG_WINDOW_HIDDEN = ConfigFlag.WINDOW_HIDDEN
FLAG_WINDOW_ALWAYS_RUN = ConfigFlag.WINDOW_ALWAYS_RUN
FLAG_MSAA_4X_HINT = ConfigFlag.MSAA_4X_HINT
FLAG_VSYNC_HINT = ConfigFlag.VSYNC_HINT


class TraceLogType(IntEnum):
    """Trace log type"""
    ALL = 0
    TRACE = auto()
    DEBUG = auto()
    INFO = auto()
    WARNING = auto()
    ERROR = auto()
    FATAL = auto()
    NONE = auto()


LOG_ALL = TraceLogType.ALL
LOG_TRACE = TraceLogType.TRACE
LOG_DEBUG = TraceLogType.DEBUG
LOG_INFO = TraceLogType.INFO
LOG_WARNING = TraceLogType.WARNING
LOG_ERROR = TraceLogType.ERROR
LOG_FATAL = TraceLogType.FATAL
LOG_NONE = TraceLogType.NONE


class KeyboardKey(IntEnum):
    """Keyboard keys"""
    APOSTROPHE = 39
    COMMA = 44
    MINUS = 45
    PERIOD = 46
    SLASH = 47
    ZERO = 48
    ONE = 49
    TWO = 50
    THREE = 51
    FOUR = 52
    FIVE = 53
    SIX = 54
    SEVEN = 55
    EIGHT = 56
    NINE = 57
    SEMICOLON = 59
    EQUAL = 61
    A = 65
    B = 66
    C = 67
    D = 68
    E = 69
    F = 70
    G = 71
    H = 72
    I = 73
    J = 74
    K = 75
    L = 76
    M = 77
    N = 78
    O = 79
    P = 80
    Q = 81
    R = 82
    S = 83
    T = 84
    U = 85
    V = 86
    W = 87
    X = 88
    Y = 89
    Z = 90
    SPACE = 32
    ESCAPE = 256
    ENTER = 257
    TAB = 258
    BACKSPACE = 259
    INSERT = 260
    DELETE = 261
    RIGHT = 262
    LEFT = 263
    DOWN = 264
    UP = 265
    PAGE_UP = 266
    PAGE_DOWN = 267
    HOME = 268
    END = 269
    CAPS_LOCK = 280
    SCROLL_LOCK = 281
    NUM_LOCK = 282
    PRINT_SCREEN = 283
    PAUSE = 284
    F1 = 290
    F2 = 291
    F3 = 292
    F4 = 293
    F5 = 294
    F6 = 295
    F7 = 296
    F8 = 297
    F9 = 298
    F10 = 299
    F11 = 300
    F12 = 301
    LEFT_SHIFT = 340
    LEFT_CONTROL = 341
    LEFT_ALT = 342
    LEFT_SUPER = 343
    RIGHT_SHIFT = 344
    RIGHT_CONTROL = 345
    RIGHT_ALT = 346
    RIGHT_SUPER = 347
    KB_MENU = 348
    LEFT_BRACKET = 91
    BACKSLASH = 92
    RIGHT_BRACKET = 93
    GRAVE = 96
    KP_0 = 320
    KP_1 = 321
    KP_2 = 322
    KP_3 = 323
    KP_4 = 324
    KP_5 = 325
    KP_6 = 326
    KP_7 = 327
    KP_8 = 328
    KP_9 = 329
    KP_DECIMAL = 330
    KP_DIVIDE = 331
    KP_MULTIPLY = 332
    KP_SUBTRACT = 333
    KP_ADD = 334
    KP_ENTER = 335
    KP_EQUAL = 336


KEY_APOSTROPHE = KeyboardKey.APOSTROPHE
KEY_COMMA = KeyboardKey.COMMA
KEY_MINUS = KeyboardKey.MINUS
KEY_PERIOD = KeyboardKey.PERIOD
KEY_SLASH = KeyboardKey.SLASH
KEY_ZERO = KeyboardKey.ZERO
KEY_ONE = KeyboardKey.ONE
KEY_TWO = KeyboardKey.TWO
KEY_THREE = KeyboardKey.THREE
KEY_FOUR = KeyboardKey.FOUR
KEY_FIVE = KeyboardKey.FIVE
KEY_SIX = KeyboardKey.SIX
KEY_SEVEN = KeyboardKey.SEVEN
KEY_EIGHT = KeyboardKey.EIGHT
KEY_NINE = KeyboardKey.NINE
KEY_SEMICOLON = KeyboardKey.SEMICOLON
KEY_EQUAL = KeyboardKey.EQUAL
KEY_A = KeyboardKey.A
KEY_B = KeyboardKey.B
KEY_C = KeyboardKey.C
KEY_D = KeyboardKey.D
KEY_E = KeyboardKey.E
KEY_F = KeyboardKey.F
KEY_G = KeyboardKey.G
KEY_H = KeyboardKey.H
KEY_I = KeyboardKey.I
KEY_J = KeyboardKey.J
KEY_K = KeyboardKey.K
KEY_L = KeyboardKey.L
KEY_M = KeyboardKey.M
KEY_N = KeyboardKey.N
KEY_O = KeyboardKey.O
KEY_P = KeyboardKey.P
KEY_Q = KeyboardKey.Q
KEY_R = KeyboardKey.R
KEY_S = KeyboardKey.S
KEY_T = KeyboardKey.T
KEY_U = KeyboardKey.U
KEY_V = KeyboardKey.V
KEY_W = KeyboardKey.W
KEY_X = KeyboardKey.X
KEY_Y = KeyboardKey.Y
KEY_Z = KeyboardKey.Z
KEY_SPACE = KeyboardKey.SPACE
KEY_ESCAPE = KeyboardKey.ESCAPE
KEY_ENTER = KeyboardKey.ENTER
KEY_TAB = KeyboardKey.TAB
KEY_BACKSPACE = KeyboardKey.BACKSPACE
KEY_INSERT = KeyboardKey.INSERT
KEY_DELETE = KeyboardKey.DELETE
KEY_RIGHT = KeyboardKey.RIGHT
KEY_LEFT = KeyboardKey.LEFT
KEY_DOWN = KeyboardKey.DOWN
KEY_UP = KeyboardKey.UP
KEY_PAGE_UP = KeyboardKey.PAGE_UP
KEY_PAGE_DOWN = KeyboardKey.PAGE_DOWN
KEY_HOME = KeyboardKey.HOME
KEY_END = KeyboardKey.END
KEY_CAPS_LOCK = KeyboardKey.CAPS_LOCK
KEY_SCROLL_LOCK = KeyboardKey.SCROLL_LOCK
KEY_NUM_LOCK = KeyboardKey.NUM_LOCK
KEY_PRINT_SCREEN = KeyboardKey.PRINT_SCREEN
KEY_PAUSE = KeyboardKey.PAUSE
KEY_F1 = KeyboardKey.F1
KEY_F2 = KeyboardKey.F2
KEY_F3 = KeyboardKey.F3
KEY_F4 = KeyboardKey.F4
KEY_F5 = KeyboardKey.F5
KEY_F6 = KeyboardKey.F6
KEY_F7 = KeyboardKey.F7
KEY_F8 = KeyboardKey.F8
KEY_F9 = KeyboardKey.F9
KEY_F10 = KeyboardKey.F10
KEY_F11 = KeyboardKey.F11
KEY_F12 = KeyboardKey.F12
KEY_LEFT_SHIFT = KeyboardKey.LEFT_SHIFT
KEY_LEFT_CONTROL = KeyboardKey.LEFT_CONTROL
KEY_LEFT_ALT = KeyboardKey.LEFT_ALT
KEY_LEFT_SUPER = KeyboardKey.LEFT_SUPER
KEY_RIGHT_SHIFT = KeyboardKey.RIGHT_SHIFT
KEY_RIGHT_CONTROL = KeyboardKey.RIGHT_CONTROL
KEY_RIGHT_ALT = KeyboardKey.RIGHT_ALT
KEY_RIGHT_SUPER = KeyboardKey.RIGHT_SUPER
KEY_KB_MENU = KeyboardKey.KB_MENU
KEY_LEFT_BRACKET = KeyboardKey.LEFT_BRACKET
KEY_BACKSLASH = KeyboardKey.BACKSLASH
KEY_RIGHT_BRACKET = KeyboardKey.RIGHT_BRACKET
KEY_GRAVE = KeyboardKey.GRAVE
KEY_KP_0 = KeyboardKey.KP_0
KEY_KP_1 = KeyboardKey.KP_1
KEY_KP_2 = KeyboardKey.KP_2
KEY_KP_3 = KeyboardKey.KP_3
KEY_KP_4 = KeyboardKey.KP_4
KEY_KP_5 = KeyboardKey.KP_5
KEY_KP_6 = KeyboardKey.KP_6
KEY_KP_7 = KeyboardKey.KP_7
KEY_KP_8 = KeyboardKey.KP_8
KEY_KP_9 = KeyboardKey.KP_9
KEY_KP_DECIMAL = KeyboardKey.KP_DECIMAL
KEY_KP_DIVIDE = KeyboardKey.KP_DIVIDE
KEY_KP_MULTIPLY = KeyboardKey.KP_MULTIPLY
KEY_KP_SUBTRACT = KeyboardKey.KP_SUBTRACT
KEY_KP_ADD = KeyboardKey.KP_ADD
KEY_KP_ENTER = KeyboardKey.KP_ENTER
KEY_KP_EQUAL = KeyboardKey.KP_EQUAL


class AndroidButton(IntEnum):
    """Android buttons"""
    BACK = 4
    MENU = 82
    VOLUME_UP = 24
    VOLUME_DOWN = 25


KEY_BACK = AndroidButton.BACK
KEY_MENU = AndroidButton.MENU
KEY_VOLUME_UP = AndroidButton.VOLUME_UP
KEY_VOLUME_DOWN = AndroidButton.VOLUME_DOWN


class MouseButton(IntEnum):
    """Mouse buttons"""
    LEFT_BUTTON = 0
    RIGHT_BUTTON = 1
    MIDDLE_BUTTON = 2


MOUSE_LEFT_BUTTON = MouseButton.LEFT_BUTTON
MOUSE_RIGHT_BUTTON = MouseButton.RIGHT_BUTTON
MOUSE_MIDDLE_BUTTON = MouseButton.MIDDLE_BUTTON


class GamepadNumber(IntEnum):
    """Gamepad number"""
    PLAYER1 = 0
    PLAYER2 = 1
    PLAYER3 = 2
    PLAYER4 = 3


GAMEPAD_PLAYER1 = GamepadNumber.PLAYER1
GAMEPAD_PLAYER2 = GamepadNumber.PLAYER2
GAMEPAD_PLAYER3 = GamepadNumber.PLAYER3
GAMEPAD_PLAYER4 = GamepadNumber.PLAYER4


class GamepadButton(IntEnum):
    """Gamepad Buttons"""
    BUTTON_UNKNOWN = 0
    BUTTON_LEFT_FACE_UP = auto()
    BUTTON_LEFT_FACE_RIGHT = auto()
    BUTTON_LEFT_FACE_DOWN = auto()
    BUTTON_LEFT_FACE_LEFT = auto()
    BUTTON_RIGHT_FACE_UP = auto()
    BUTTON_RIGHT_FACE_RIGHT = auto()
    BUTTON_RIGHT_FACE_DOWN = auto()
    BUTTON_RIGHT_FACE_LEFT = auto()
    BUTTON_LEFT_TRIGGER_1 = auto()
    BUTTON_LEFT_TRIGGER_2 = auto()
    BUTTON_RIGHT_TRIGGER_1 = auto()
    BUTTON_RIGHT_TRIGGER_2 = auto()
    BUTTON_MIDDLE_LEFT = auto()
    BUTTON_MIDDLE = auto()
    BUTTON_MIDDLE_RIGHT = auto()
    BUTTON_LEFT_THUMB = auto()
    BUTTON_RIGHT_THUMB = auto()


GAMEPAD_BUTTON_UNKNOWN = GamepadButton.BUTTON_UNKNOWN
GAMEPAD_BUTTON_LEFT_FACE_UP = GamepadButton.BUTTON_LEFT_FACE_UP
GAMEPAD_BUTTON_LEFT_FACE_RIGHT = GamepadButton.BUTTON_LEFT_FACE_RIGHT
GAMEPAD_BUTTON_LEFT_FACE_DOWN = GamepadButton.BUTTON_LEFT_FACE_DOWN
GAMEPAD_BUTTON_LEFT_FACE_LEFT = GamepadButton.BUTTON_LEFT_FACE_LEFT
GAMEPAD_BUTTON_RIGHT_FACE_UP = GamepadButton.BUTTON_RIGHT_FACE_UP
GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = GamepadButton.BUTTON_RIGHT_FACE_RIGHT
GAMEPAD_BUTTON_RIGHT_FACE_DOWN = GamepadButton.BUTTON_RIGHT_FACE_DOWN
GAMEPAD_BUTTON_RIGHT_FACE_LEFT = GamepadButton.BUTTON_RIGHT_FACE_LEFT
GAMEPAD_BUTTON_LEFT_TRIGGER_1 = GamepadButton.BUTTON_LEFT_TRIGGER_1
GAMEPAD_BUTTON_LEFT_TRIGGER_2 = GamepadButton.BUTTON_LEFT_TRIGGER_2
GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = GamepadButton.BUTTON_RIGHT_TRIGGER_1
GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = GamepadButton.BUTTON_RIGHT_TRIGGER_2
GAMEPAD_BUTTON_MIDDLE_LEFT = GamepadButton.BUTTON_MIDDLE_LEFT
GAMEPAD_BUTTON_MIDDLE = GamepadButton.BUTTON_MIDDLE
GAMEPAD_BUTTON_MIDDLE_RIGHT = GamepadButton.BUTTON_MIDDLE_RIGHT
GAMEPAD_BUTTON_LEFT_THUMB = GamepadButton.BUTTON_LEFT_THUMB
GAMEPAD_BUTTON_RIGHT_THUMB = GamepadButton.BUTTON_RIGHT_THUMB


class GamepadAxis(IntEnum):
    """Gamepad Buttons"""
    AXIS_UNKNOWN = 0
    AXIS_LEFT_X = auto()
    AXIS_LEFT_Y = auto()
    AXIS_RIGHT_X = auto()
    AXIS_RIGHT_Y = auto()
    AXIS_LEFT_TRIGGER = auto()
    AXIS_RIGHT_TRIGGER = auto()


GAMEPAD_AXIS_UNKNOWN = GamepadAxis.AXIS_UNKNOWN
GAMEPAD_AXIS_LEFT_X = GamepadAxis.AXIS_LEFT_X
GAMEPAD_AXIS_LEFT_Y = GamepadAxis.AXIS_LEFT_Y
GAMEPAD_AXIS_RIGHT_X = GamepadAxis.AXIS_RIGHT_X
GAMEPAD_AXIS_RIGHT_Y = GamepadAxis.AXIS_RIGHT_Y
GAMEPAD_AXIS_LEFT_TRIGGER = GamepadAxis.AXIS_LEFT_TRIGGER
GAMEPAD_AXIS_RIGHT_TRIGGER = GamepadAxis.AXIS_RIGHT_TRIGGER


class ShaderLocationIndex(IntEnum):
    """Shader location point type"""
    VERTEX_POSITION = 0
    VERTEX_TEXCOORD01 = auto()
    VERTEX_TEXCOORD02 = auto()
    VERTEX_NORMAL = auto()
    VERTEX_TANGENT = auto()
    VERTEX_COLOR = auto()
    MATRIX_MVP = auto()
    MATRIX_MODEL = auto()
    MATRIX_VIEW = auto()
    MATRIX_PROJECTION = auto()
    VECTOR_VIEW = auto()
    COLOR_DIFFUSE = auto()
    COLOR_SPECULAR = auto()
    COLOR_AMBIENT = auto()
    MAP_ALBEDO = auto()
    MAP_METALNESS = auto()
    MAP_NORMAL = auto()
    MAP_ROUGHNESS = auto()
    MAP_OCCLUSION = auto()
    MAP_EMISSION = auto()
    MAP_HEIGHT = auto()
    MAP_CUBEMAP = auto()
    MAP_IRRADIANCE = auto()
    MAP_PREFILTER = auto()
    MAP_BRDF = auto()


LOC_VERTEX_POSITION = ShaderLocationIndex.VERTEX_POSITION
LOC_VERTEX_TEXCOORD01 = ShaderLocationIndex.VERTEX_TEXCOORD01
LOC_VERTEX_TEXCOORD02 = ShaderLocationIndex.VERTEX_TEXCOORD02
LOC_VERTEX_NORMAL = ShaderLocationIndex.VERTEX_NORMAL
LOC_VERTEX_TANGENT = ShaderLocationIndex.VERTEX_TANGENT
LOC_VERTEX_COLOR = ShaderLocationIndex.VERTEX_COLOR
LOC_MATRIX_MVP = ShaderLocationIndex.MATRIX_MVP
LOC_MATRIX_MODEL = ShaderLocationIndex.MATRIX_MODEL
LOC_MATRIX_VIEW = ShaderLocationIndex.MATRIX_VIEW
LOC_MATRIX_PROJECTION = ShaderLocationIndex.MATRIX_PROJECTION
LOC_VECTOR_VIEW = ShaderLocationIndex.VECTOR_VIEW
LOC_COLOR_DIFFUSE = ShaderLocationIndex.COLOR_DIFFUSE
LOC_COLOR_SPECULAR = ShaderLocationIndex.COLOR_SPECULAR
LOC_COLOR_AMBIENT = ShaderLocationIndex.COLOR_AMBIENT
LOC_MAP_ALBEDO = ShaderLocationIndex.MAP_ALBEDO
LOC_MAP_METALNESS = ShaderLocationIndex.MAP_METALNESS
LOC_MAP_NORMAL = ShaderLocationIndex.MAP_NORMAL
LOC_MAP_ROUGHNESS = ShaderLocationIndex.MAP_ROUGHNESS
LOC_MAP_OCCLUSION = ShaderLocationIndex.MAP_OCCLUSION
LOC_MAP_EMISSION = ShaderLocationIndex.MAP_EMISSION
LOC_MAP_HEIGHT = ShaderLocationIndex.MAP_HEIGHT
LOC_MAP_CUBEMAP = ShaderLocationIndex.MAP_CUBEMAP
LOC_MAP_IRRADIANCE = ShaderLocationIndex.MAP_IRRADIANCE
LOC_MAP_PREFILTER = ShaderLocationIndex.MAP_PREFILTER
LOC_MAP_BRDF = ShaderLocationIndex.MAP_BRDF

LOC_MAP_DIFFUSE = LOC_MAP_ALBEDO
LOC_MAP_SPECULAR = LOC_MAP_METALNESS


class ShaderUniformDataType(IntEnum):
    """Shader uniform data types"""
    FLOAT = 0
    VEC2 = auto()
    VEC3 = auto()
    VEC4 = auto()
    INT = auto()
    IVEC2 = auto()
    IVEC3 = auto()
    IVEC4 = auto()
    SAMPLER2D = auto()


UNIFORM_FLOAT = ShaderUniformDataType.FLOAT
UNIFORM_VEC2 = ShaderUniformDataType.VEC2
UNIFORM_VEC3 = ShaderUniformDataType.VEC3
UNIFORM_VEC4 = ShaderUniformDataType.VEC4
UNIFORM_INT = ShaderUniformDataType.INT
UNIFORM_IVEC2 = ShaderUniformDataType.IVEC2
UNIFORM_IVEC3 = ShaderUniformDataType.IVEC3
UNIFORM_IVEC4 = ShaderUniformDataType.IVEC4
UNIFORM_SAMPLER2D = ShaderUniformDataType.SAMPLER2D


class MaterialMapType(IntEnum):
    """Material map type"""
    ALBEDO = 0
    METALNESS = 1
    NORMAL = 2
    ROUGHNESS = 3
    OCCLUSION = auto()
    EMISSION = auto()
    HEIGHT = auto()
    CUBEMAP = auto()
    IRRADIANCE = auto()
    PREFILTER = auto()
    BRDF = auto()


MAP_ALBEDO = MaterialMapType.ALBEDO
MAP_METALNESS = MaterialMapType.METALNESS
MAP_NORMAL = MaterialMapType.NORMAL
MAP_ROUGHNESS = MaterialMapType.ROUGHNESS
MAP_OCCLUSION = MaterialMapType.OCCLUSION
MAP_EMISSION = MaterialMapType.EMISSION
MAP_HEIGHT = MaterialMapType.HEIGHT
MAP_CUBEMAP = MaterialMapType.CUBEMAP
MAP_IRRADIANCE = MaterialMapType.IRRADIANCE
MAP_PREFILTER = MaterialMapType.PREFILTER
MAP_BRDF = MaterialMapType.BRDF

MAP_DIFFUSE = MAP_ALBEDO
MAP_SPECULAR = MAP_METALNESS


class PixelFormat(IntEnum):
    """NOTE: Support depends on OpenGL version and platform"""
    GRAYSCALE = 1
    GRAY_ALPHA = auto()
    R5G6B5 = auto()
    R8G8B8 = auto()
    R5G5B5A1 = auto()
    R4G4B4A4 = auto()
    R8G8B8A8 = auto()
    R32 = auto()
    R32G32B32 = auto()
    R32G32B32A32 = auto()
    DXT1_RGB = auto()
    DXT1_RGBA = auto()
    DXT3_RGBA = auto()
    DXT5_RGBA = auto()
    ETC1_RGB = auto()
    ETC2_RGB = auto()
    ETC2_EAC_RGBA = auto()
    PVRT_RGB = auto()
    PVRT_RGBA = auto()
    ASTC_4x4_RGBA = auto()
    ASTC_8x8_RGBA = auto()


UNCOMPRESSED_GRAYSCALE = PixelFormat.GRAYSCALE
UNCOMPRESSED_GRAY_ALPHA = PixelFormat.GRAY_ALPHA
UNCOMPRESSED_R5G6B5 = PixelFormat.R5G6B5
UNCOMPRESSED_R8G8B8 = PixelFormat.R8G8B8
UNCOMPRESSED_R5G5B5A1 = PixelFormat.R5G5B5A1
UNCOMPRESSED_R4G4B4A4 = PixelFormat.R4G4B4A4
UNCOMPRESSED_R8G8B8A8 = PixelFormat.R8G8B8A8
UNCOMPRESSED_R32 = PixelFormat.R32
UNCOMPRESSED_R32G32B32 = PixelFormat.R32G32B32
UNCOMPRESSED_R32G32B32A32 = PixelFormat.R32G32B32A32
UNCOMPRESSED_DXT1_RGB = PixelFormat.DXT1_RGB
UNCOMPRESSED_DXT1_RGBA = PixelFormat.DXT1_RGBA
UNCOMPRESSED_DXT3_RGBA = PixelFormat.DXT3_RGBA
UNCOMPRESSED_DXT5_RGBA = PixelFormat.DXT5_RGBA
UNCOMPRESSED_ETC1_RGB = PixelFormat.ETC1_RGB
UNCOMPRESSED_ETC2_RGB = PixelFormat.ETC2_RGB
UNCOMPRESSED_ETC2_EAC_RGBA = PixelFormat.ETC2_EAC_RGBA
UNCOMPRESSED_PVRT_RGB = PixelFormat.PVRT_RGB
UNCOMPRESSED_PVRT_RGBA = PixelFormat.PVRT_RGBA
UNCOMPRESSED_ASTC_4x4_RGBA = PixelFormat.ASTC_4x4_RGBA
UNCOMPRESSED_ASTC_8x8_RGBA = PixelFormat.ASTC_8x8_RGBA


class TextureFilterMode(IntEnum):
    """NOTE 2: Filter is accordingly set for minification and magnification"""
    POINT = 0
    BILINEAR = auto()
    TRILINEAR = auto()
    ANISOTROPIC_4X = auto()
    ANISOTROPIC_8X = auto()
    ANISOTROPIC_16X = auto()


FILTER_POINT = TextureFilterMode.POINT
FILTER_BILINEAR = TextureFilterMode.BILINEAR
FILTER_TRILINEAR = TextureFilterMode.TRILINEAR
FILTER_ANISOTROPIC_4X = TextureFilterMode.ANISOTROPIC_4X
FILTER_ANISOTROPIC_8X = TextureFilterMode.ANISOTROPIC_8X
FILTER_ANISOTROPIC_16X = TextureFilterMode.ANISOTROPIC_16X


class CubemapLayoutType(IntEnum):
    """Cubemap layout type"""
    AUTO_DETECT = 0
    LINE_VERTICAL = auto()
    LINE_HORIZONTAL = auto()
    CROSS_THREE_BY_FOUR = auto()
    CROSS_FOUR_BY_THREE = auto()
    PANORAMA = auto()


CUBEMAP_AUTO_DETECT = CubemapLayoutType.AUTO_DETECT
CUBEMAP_LINE_VERTICAL = CubemapLayoutType.LINE_VERTICAL
CUBEMAP_LINE_HORIZONTAL = CubemapLayoutType.LINE_HORIZONTAL
CUBEMAP_CROSS_THREE_BY_FOUR = CubemapLayoutType.CROSS_THREE_BY_FOUR
CUBEMAP_CROSS_FOUR_BY_THREE = CubemapLayoutType.CROSS_FOUR_BY_THREE
CUBEMAP_PANORAMA = CubemapLayoutType.PANORAMA


class TextureWrapMode(IntEnum):
    """Texture parameters: wrap mode"""
    REPEAT = 0
    CLAMP = auto()
    MIRROR_REPEAT = auto()
    MIRROR_CLAMP = auto()


WRAP_REPEAT = TextureWrapMode.REPEAT
WRAP_CLAMP = TextureWrapMode.CLAMP
WRAP_MIRROR_REPEAT = TextureWrapMode.MIRROR_REPEAT
WRAP_MIRROR_CLAMP = TextureWrapMode.MIRROR_CLAMP


class FontType(IntEnum):
    """Font type, defines generation method"""
    DEFAULT = 0
    BITMAP = auto()
    SDF = auto()


FONT_DEFAULT = FontType.DEFAULT
FONT_BITMAP = FontType.BITMAP
FONT_SDF = FontType.SDF


class BlendMode(IntEnum):
    """Color blending modes (pre-defined)"""
    ALPHA = 0
    ADDITIVE = auto()
    MULTIPLIED = auto()


BLEND_ALPHA = BlendMode.ALPHA
BLEND_ADDITIVE = BlendMode.ADDITIVE
BLEND_MULTIPLIED = BlendMode.MULTIPLIED


class GestureType(IntEnum):
    """NOTE: It could be used as flags to enable only some gestures"""
    NONE = 0
    TAP = 1
    DOUBLETAP = 2
    HOLD = 4
    DRAG = 8
    SWIPE_RIGHT = 16
    SWIPE_LEFT = 32
    SWIPE_UP = 64
    SWIPE_DOWN = 128
    PINCH_IN = 256
    PINCH_OUT = 512


GESTURE_NONE = GestureType.NONE
GESTURE_TAP = GestureType.TAP
GESTURE_DOUBLETAP = GestureType.DOUBLETAP
GESTURE_HOLD = GestureType.HOLD
GESTURE_DRAG = GestureType.DRAG
GESTURE_SWIPE_RIGHT = GestureType.SWIPE_RIGHT
GESTURE_SWIPE_LEFT = GestureType.SWIPE_LEFT
GESTURE_SWIPE_UP = GestureType.SWIPE_UP
GESTURE_SWIPE_DOWN = GestureType.SWIPE_DOWN
GESTURE_PINCH_IN = GestureType.PINCH_IN
GESTURE_PINCH_OUT = GestureType.PINCH_OUT


class CameraMode(IntEnum):
    """Camera system modes"""
    CUSTOM = 0
    FREE = auto()
    ORBITAL = auto()
    FIRST_PERSON = auto()
    THIRD_PERSON = auto()


CAMERA_CUSTOM = CameraMode.CUSTOM
CAMERA_FREE = CameraMode.FREE
CAMERA_ORBITAL = CameraMode.ORBITAL
CAMERA_FIRST_PERSON = CameraMode.FIRST_PERSON
CAMERA_THIRD_PERSON = CameraMode.THIRD_PERSON


class CameraType(IntEnum):
    """Camera projection modes"""
    PERSPECTIVE = 0
    ORTHOGRAPHIC = auto()


CAMERA_PERSPECTIVE = CameraType.PERSPECTIVE
CAMERA_ORTHOGRAPHIC = CameraType.ORTHOGRAPHIC


class NPatchType(IntEnum):
    """Type of n-patch"""
    N9PATCH = 0
    N3PATCH_VERTICAL = auto()
    N3PATCH_HORIZONTAL = auto()


NPT_9PATCH = NPatchType.N9PATCH
NPT_3PATCH_VERTICAL = NPatchType.N3PATCH_VERTICAL
NPT_3PATCH_HORIZONTAL = NPatchType.N3PATCH_HORIZONTAL


TraceLogCallback = CFUNCTYPE(c_int, c_char_p, c_void_p)

LIGHTGRAY = Color(200, 200, 200, 255)    # Light Gray
GRAY = Color(130, 130, 130, 255)    # Gray
DARKGRAY = Color(80, 80, 80, 255)       # Dark Gray
YELLOW = Color(253, 249, 0, 255)      # Yellow
GOLD = Color(255, 203, 0, 255)      # Gold
ORANGE = Color(255, 161, 0, 255)      # Orange
PINK = Color(255, 109, 194, 255)    # Pink
RED = Color(230, 41, 55, 255)      # Red
MAROON = Color(190, 33, 55, 255)      # Maroon
GREEN = Color(0, 228, 48, 255)       # Green
LIME = Color(0, 158, 47, 255)       # Lime
DARKGREEN = Color(0, 117, 44, 255)       # Dark Green
SKYBLUE = Color(102, 191, 255, 255)    # Sky Blue
BLUE = Color(0, 121, 241, 255)      # Blue
DARKBLUE = Color(0, 82, 172, 255)       # Dark Blue
PURPLE = Color(200, 122, 255, 255)    # Purple
VIOLET = Color(135, 60, 190, 255)     # Violet
DARKPURPLE = Color(112, 31, 126, 255)     # Dark Purple
BEIGE = Color(211, 176, 131, 255)    # Beige
BROWN = Color(127, 106, 79, 255)     # Brown
DARKBROWN = Color(76, 63, 47, 255)       # Dark Brown
WHITE = Color(255, 255, 255, 255)    # White
BLACK = Color(0, 0, 0, 255)          # Black
BLANK = Color(0, 0, 0, 0)            # Blank (Transparent)
MAGENTA = Color(255, 0, 255, 255)      # Magenta
RAYWHITE = Color(245, 245, 245, 255)    # My own White (raylib logo)

_rl.InitWindow.argtypes = [c_int, c_int, c_char_p]
_rl.InitWindow.restype = None
def init_window(width: int, height: int, title: bytes) -> None:
    _rl.InitWindow(width, height, title)


_rl.WindowShouldClose.argtypes = []
_rl.WindowShouldClose.restype = c_bool
def window_should_close() -> bool:
    return _rl.WindowShouldClose()


_rl.CloseWindow.argtypes = []
_rl.CloseWindow.restype = None
def close_window() -> None:
    _rl.CloseWindow()


_rl.IsWindowReady.argtypes = []
_rl.IsWindowReady.restype = c_bool
def is_window_ready() -> bool:
    return _rl.IsWindowReady()


_rl.IsWindowMinimized.argtypes = []
_rl.IsWindowMinimized.restype = c_bool
def is_window_minimized() -> bool:
    return _rl.IsWindowMinimized()


_rl.IsWindowResized.argtypes = []
_rl.IsWindowResized.restype = c_bool
def is_window_resized() -> bool:
    return _rl.IsWindowResized()


_rl.IsWindowHidden.argtypes = []
_rl.IsWindowHidden.restype = c_bool
def is_window_hidden() -> bool:
    return _rl.IsWindowHidden()


_rl.ToggleFullscreen.argtypes = []
_rl.ToggleFullscreen.restype = None
def toggle_fullscreen() -> None:
    _rl.ToggleFullscreen()


_rl.UnhideWindow.argtypes = []
_rl.UnhideWindow.restype = None
def unhide_window() -> None:
    _rl.UnhideWindow()


_rl.HideWindow.argtypes = []
_rl.HideWindow.restype = None
def hide_window() -> None:
    _rl.HideWindow()


_rl.SetWindowIcon.argtypes = [Image]
_rl.SetWindowIcon.restype = None
def set_window_icon(image: Image) -> None:
    _rl.SetWindowIcon(image)


_rl.SetWindowTitle.argtypes = [c_char_p]
_rl.SetWindowTitle.restype = None
def set_window_title(title: bytes) -> None:
    _rl.SetWindowTitle(title)


_rl.SetWindowPosition.argtypes = [c_int, c_int]
_rl.SetWindowPosition.restype = None
def set_window_position(x: int, y: int) -> None:
    _rl.SetWindowPosition(x, y)


_rl.SetWindowMonitor.argtypes = [c_int]
_rl.SetWindowMonitor.restype = None
def set_window_monitor(monitor: int) -> None:
    _rl.SetWindowMonitor(monitor)


_rl.SetWindowMinSize.argtypes = [c_int, c_int]
_rl.SetWindowMinSize.restype = None
def set_window_min_size(width: int, height: int) -> None:
    _rl.SetWindowMinSize(width, height)


_rl.SetWindowSize.argtypes = [c_int, c_int]
_rl.SetWindowSize.restype = None
def set_window_size(width: int, height: int) -> None:
    _rl.SetWindowSize(width, height)


_rl.GetWindowHandle.argtypes = []
_rl.GetWindowHandle.restype = c_void_p
def get_window_handle() -> int:
    return _rl.GetWindowHandle()


_rl.GetScreenWidth.argtypes = []
_rl.GetScreenWidth.restype = c_int
def get_screen_width() -> int:
    return _rl.GetScreenWidth()


_rl.GetScreenHeight.argtypes = []
_rl.GetScreenHeight.restype = c_int
def get_screen_height() -> int:
    return _rl.GetScreenHeight()


_rl.GetMonitorCount.argtypes = []
_rl.GetMonitorCount.restype = c_int
def get_monitor_count() -> int:
    return _rl.GetMonitorCount()


_rl.GetMonitorWidth.argtypes = [c_int]
_rl.GetMonitorWidth.restype = c_int
def get_monitor_width(monitor: int) -> int:
    return _rl.GetMonitorWidth(monitor)


_rl.GetMonitorHeight.argtypes = [c_int]
_rl.GetMonitorHeight.restype = c_int
def get_monitor_height(monitor: int) -> int:
    return _rl.GetMonitorHeight(monitor)


_rl.GetMonitorPhysicalWidth.argtypes = [c_int]
_rl.GetMonitorPhysicalWidth.restype = c_int
def get_monitor_physical_width(monitor: int) -> int:
    return _rl.GetMonitorPhysicalWidth(monitor)


_rl.GetMonitorPhysicalHeight.argtypes = [c_int]
_rl.GetMonitorPhysicalHeight.restype = c_int
def get_monitor_physical_height(monitor: int) -> int:
    return _rl.GetMonitorPhysicalHeight(monitor)


_rl.GetWindowPosition.argtypes = []
_rl.GetWindowPosition.restype = Vector2
def get_window_position() -> Vector2:
    return _rl.GetWindowPosition()


_rl.GetMonitorName.argtypes = [c_int]
_rl.GetMonitorName.restype = c_char_p
def get_monitor_name(monitor: int) -> bytes:
    return _rl.GetMonitorName(monitor)


_rl.GetClipboardText.argtypes = []
_rl.GetClipboardText.restype = c_char_p
def get_clipboard_text() -> bytes:
    return _rl.GetClipboardText()


_rl.SetClipboardText.argtypes = [c_char_p]
_rl.SetClipboardText.restype = None
def set_clipboard_text(text: bytes) -> None:
    _rl.SetClipboardText(text)


_rl.ShowCursor.argtypes = []
_rl.ShowCursor.restype = None
def show_cursor() -> None:
    _rl.ShowCursor()


_rl.HideCursor.argtypes = []
_rl.HideCursor.restype = None
def hide_cursor() -> None:
    _rl.HideCursor()


_rl.IsCursorHidden.argtypes = []
_rl.IsCursorHidden.restype = c_bool
def is_cursor_hidden() -> bool:
    return _rl.IsCursorHidden()


_rl.EnableCursor.argtypes = []
_rl.EnableCursor.restype = None
def enable_cursor() -> None:
    _rl.EnableCursor()


_rl.DisableCursor.argtypes = []
_rl.DisableCursor.restype = None
def disable_cursor() -> None:
    _rl.DisableCursor()


_rl.ClearBackground.argtypes = [Color]
_rl.ClearBackground.restype = None
def clear_background(color: Color) -> None:
    _rl.ClearBackground(color)


_rl.BeginDrawing.argtypes = []
_rl.BeginDrawing.restype = None
def begin_drawing() -> None:
    _rl.BeginDrawing()


_rl.EndDrawing.argtypes = []
_rl.EndDrawing.restype = None
def end_drawing() -> None:
    _rl.EndDrawing()


_rl.BeginMode2D.argtypes = [Camera2D]
_rl.BeginMode2D.restype = None
def begin_mode2_d(camera: Camera2D) -> None:
    _rl.BeginMode2D(camera)


_rl.EndMode2D.argtypes = []
_rl.EndMode2D.restype = None
def end_mode2_d() -> None:
    _rl.EndMode2D()


_rl.BeginMode3D.argtypes = [Camera3D]
_rl.BeginMode3D.restype = None
def begin_mode3_d(camera: Camera3D) -> None:
    _rl.BeginMode3D(camera)


_rl.EndMode3D.argtypes = []
_rl.EndMode3D.restype = None
def end_mode3_d() -> None:
    _rl.EndMode3D()


_rl.BeginTextureMode.argtypes = [RenderTexture2D]
_rl.BeginTextureMode.restype = None
def begin_texture_mode(target: RenderTexture2D) -> None:
    _rl.BeginTextureMode(target)


_rl.EndTextureMode.argtypes = []
_rl.EndTextureMode.restype = None
def end_texture_mode() -> None:
    _rl.EndTextureMode()


_rl.BeginScissorMode.argtypes = [c_int, c_int, c_int, c_int]
_rl.BeginScissorMode.restype = None
def begin_scissor_mode(x: int, y: int, width: int, height: int) -> None:
    _rl.BeginScissorMode(x, y, width, height)


_rl.EndScissorMode.argtypes = []
_rl.EndScissorMode.restype = None
def end_scissor_mode() -> None:
    _rl.EndScissorMode()


_rl.GetMouseRay.argtypes = [Vector2, Camera]
_rl.GetMouseRay.restype = Ray
def get_mouse_ray(mouse_position: Vector2, camera: Camera) -> Ray:
    return _rl.GetMouseRay(mouse_position, camera)


_rl.GetCameraMatrix.argtypes = [Camera]
_rl.GetCameraMatrix.restype = Matrix
def get_camera_matrix(camera: Camera) -> Matrix:
    return _rl.GetCameraMatrix(camera)


_rl.GetCameraMatrix2D.argtypes = [Camera2D]
_rl.GetCameraMatrix2D.restype = Matrix
def get_camera_matrix2_d(camera: Camera2D) -> Matrix:
    return _rl.GetCameraMatrix2D(camera)


_rl.GetWorldToScreen.argtypes = [Vector3, Camera]
_rl.GetWorldToScreen.restype = Vector2
def get_world_to_screen(position: Vector3, camera: Camera) -> Vector2:
    return _rl.GetWorldToScreen(position, camera)


_rl.GetWorldToScreen2D.argtypes = [Vector2, Camera2D]
_rl.GetWorldToScreen2D.restype = Vector2
def get_world_to_screen2_d(position: Vector2, camera: Camera2D) -> Vector2:
    return _rl.GetWorldToScreen2D(position, camera)


_rl.GetScreenToWorld2D.argtypes = [Vector2, Camera2D]
_rl.GetScreenToWorld2D.restype = Vector2
def get_screen_to_world2_d(position: Vector2, camera: Camera2D) -> Vector2:
    return _rl.GetScreenToWorld2D(position, camera)


_rl.SetTargetFPS.argtypes = [c_int]
_rl.SetTargetFPS.restype = None
def set_target_fps(fps: int) -> None:
    _rl.SetTargetFPS(fps)


_rl.GetFPS.argtypes = []
_rl.GetFPS.restype = c_int
def get_fps() -> int:
    return _rl.GetFPS()


_rl.GetFrameTime.argtypes = []
_rl.GetFrameTime.restype = c_float
def get_frame_time() -> float:
    return _rl.GetFrameTime()


_rl.GetTime.argtypes = []
_rl.GetTime.restype = c_double
def get_time() -> float:
    return _rl.GetTime()


_rl.ColorToInt.argtypes = [Color]
_rl.ColorToInt.restype = c_int
def color_to_int(color: Color) -> int:
    return _rl.ColorToInt(color)


_rl.ColorNormalize.argtypes = [Color]
_rl.ColorNormalize.restype = Vector4
def color_normalize(color: Color) -> Vector4:
    return _rl.ColorNormalize(color)


_rl.ColorFromNormalized.argtypes = [Vector4]
_rl.ColorFromNormalized.restype = Color
def color_from_normalized(normalized: Vector4) -> Color:
    return _rl.ColorFromNormalized(normalized)


_rl.ColorToHSV.argtypes = [Color]
_rl.ColorToHSV.restype = Vector3
def color_to_hsv(color: Color) -> Vector3:
    return _rl.ColorToHSV(color)


_rl.ColorFromHSV.argtypes = [Vector3]
_rl.ColorFromHSV.restype = Color
def color_from_hsv(hsv: Vector3) -> Color:
    return _rl.ColorFromHSV(hsv)


_rl.GetColor.argtypes = [c_int]
_rl.GetColor.restype = Color
def get_color(hex_value: int) -> Color:
    return _rl.GetColor(hex_value)


_rl.Fade.argtypes = [Color, c_float]
_rl.Fade.restype = Color
def fade(color: Color, alpha: float) -> Color:
    return _rl.Fade(color, alpha)


_rl.SetConfigFlags.argtypes = [c_uint]
_rl.SetConfigFlags.restype = None
def set_config_flags(flags: int) -> None:
    _rl.SetConfigFlags(flags)


_rl.SetTraceLogLevel.argtypes = [c_int]
_rl.SetTraceLogLevel.restype = None
def set_trace_log_level(log_type: int) -> None:
    _rl.SetTraceLogLevel(log_type)


_rl.SetTraceLogExit.argtypes = [c_int]
_rl.SetTraceLogExit.restype = None
def set_trace_log_exit(log_type: int) -> None:
    _rl.SetTraceLogExit(log_type)


_rl.SetTraceLogCallback.argtypes = [TraceLogCallback]
_rl.SetTraceLogCallback.restype = None
def set_trace_log_callback(callback: TraceLogCallback) -> None:
    _rl.SetTraceLogCallback(callback)


_rl.TraceLog.argtypes = [c_int, c_char_p]
_rl.TraceLog.restype = None
def trace_log(log_type: int, text: bytes, *args) -> None:
    _rl.TraceLog(log_type, text)


_rl.TakeScreenshot.argtypes = [c_char_p]
_rl.TakeScreenshot.restype = None
def take_screenshot(file_name: bytes) -> None:
    _rl.TakeScreenshot(file_name)


_rl.GetRandomValue.argtypes = [c_int, c_int]
_rl.GetRandomValue.restype = c_int
def get_random_value(min: int, max: int) -> int:
    return _rl.GetRandomValue(min, max)


_rl.FileExists.argtypes = [c_char_p]
_rl.FileExists.restype = c_bool
def file_exists(file_name: bytes) -> bool:
    return _rl.FileExists(file_name)


_rl.IsFileExtension.argtypes = [c_char_p, c_char_p]
_rl.IsFileExtension.restype = c_bool
def is_file_extension(file_name: bytes, ext: bytes) -> bool:
    return _rl.IsFileExtension(file_name, ext)


_rl.DirectoryExists.argtypes = [c_char_p]
_rl.DirectoryExists.restype = c_bool
def directory_exists(dir_path: bytes) -> bool:
    return _rl.DirectoryExists(dir_path)


_rl.GetExtension.argtypes = [c_char_p]
_rl.GetExtension.restype = c_char_p
def get_extension(file_name: bytes) -> bytes:
    return _rl.GetExtension(file_name)


_rl.GetFileName.argtypes = [c_char_p]
_rl.GetFileName.restype = c_char_p
def get_file_name(file_path: bytes) -> bytes:
    return _rl.GetFileName(file_path)


_rl.GetFileNameWithoutExt.argtypes = [c_char_p]
_rl.GetFileNameWithoutExt.restype = c_char_p
def get_file_name_without_ext(file_path: bytes) -> bytes:
    return _rl.GetFileNameWithoutExt(file_path)


_rl.GetDirectoryPath.argtypes = [c_char_p]
_rl.GetDirectoryPath.restype = c_char_p
def get_directory_path(file_path: bytes) -> bytes:
    return _rl.GetDirectoryPath(file_path)


_rl.GetPrevDirectoryPath.argtypes = [c_char_p]
_rl.GetPrevDirectoryPath.restype = c_char_p
def get_prev_directory_path(dir_path: bytes) -> bytes:
    return _rl.GetPrevDirectoryPath(dir_path)


_rl.GetWorkingDirectory.argtypes = []
_rl.GetWorkingDirectory.restype = c_char_p
def get_working_directory() -> bytes:
    return _rl.GetWorkingDirectory()


_rl.GetDirectoryFiles.argtypes = [c_char_p, POINTER(c_int)]
_rl.GetDirectoryFiles.restype = POINTER(c_char_p)
def get_directory_files(dir_path: bytes, count: POINTER(c_int)) -> POINTER(c_char_p):
    return _rl.GetDirectoryFiles(dir_path, count)


_rl.ClearDirectoryFiles.argtypes = []
_rl.ClearDirectoryFiles.restype = None
def clear_directory_files() -> None:
    _rl.ClearDirectoryFiles()


_rl.ChangeDirectory.argtypes = [c_char_p]
_rl.ChangeDirectory.restype = c_bool
def change_directory(dir: bytes) -> bool:
    return _rl.ChangeDirectory(dir)


_rl.IsFileDropped.argtypes = []
_rl.IsFileDropped.restype = c_bool
def is_file_dropped() -> bool:
    return _rl.IsFileDropped()


_rl.GetDroppedFiles.argtypes = [POINTER(c_int)]
_rl.GetDroppedFiles.restype = POINTER(c_char_p)
def get_dropped_files(count: POINTER(c_int)) -> POINTER(c_char_p):
    return _rl.GetDroppedFiles(count)


_rl.ClearDroppedFiles.argtypes = []
_rl.ClearDroppedFiles.restype = None
def clear_dropped_files() -> None:
    _rl.ClearDroppedFiles()


_rl.GetFileModTime.argtypes = [c_char_p]
_rl.GetFileModTime.restype = c_long
def get_file_mod_time(file_name: bytes) -> int:
    return _rl.GetFileModTime(file_name)


_rl.CompressData.argtypes = [POINTER(c_ubyte), c_int, POINTER(c_int)]
_rl.CompressData.restype = POINTER(c_ubyte)
def compress_data(data: POINTER(c_ubyte), data_length: int, comp_data_length: POINTER(c_int)) -> POINTER(c_ubyte):
    return _rl.CompressData(data, data_length, comp_data_length)


_rl.DecompressData.argtypes = [POINTER(c_ubyte), c_int, POINTER(c_int)]
_rl.DecompressData.restype = POINTER(c_ubyte)
def decompress_data(comp_data: POINTER(c_ubyte), comp_data_length: int, data_length: POINTER(c_int)) -> POINTER(c_ubyte):
    return _rl.DecompressData(comp_data, comp_data_length, data_length)


_rl.StorageSaveValue.argtypes = [c_int, c_int]
_rl.StorageSaveValue.restype = None
def storage_save_value(position: int, value: int) -> None:
    _rl.StorageSaveValue(position, value)


_rl.StorageLoadValue.argtypes = [c_int]
_rl.StorageLoadValue.restype = c_int
def storage_load_value(position: int) -> int:
    return _rl.StorageLoadValue(position)


_rl.OpenURL.argtypes = [c_char_p]
_rl.OpenURL.restype = None
def open_url(url: bytes) -> None:
    _rl.OpenURL(url)


_rl.IsKeyPressed.argtypes = [c_int]
_rl.IsKeyPressed.restype = c_bool
def is_key_pressed(key: int) -> bool:
    return _rl.IsKeyPressed(key)


_rl.IsKeyDown.argtypes = [c_int]
_rl.IsKeyDown.restype = c_bool
def is_key_down(key: int) -> bool:
    return _rl.IsKeyDown(key)


_rl.IsKeyReleased.argtypes = [c_int]
_rl.IsKeyReleased.restype = c_bool
def is_key_released(key: int) -> bool:
    return _rl.IsKeyReleased(key)


_rl.IsKeyUp.argtypes = [c_int]
_rl.IsKeyUp.restype = c_bool
def is_key_up(key: int) -> bool:
    return _rl.IsKeyUp(key)


_rl.SetExitKey.argtypes = [c_int]
_rl.SetExitKey.restype = None
def set_exit_key(key: int) -> None:
    _rl.SetExitKey(key)


_rl.GetKeyPressed.argtypes = []
_rl.GetKeyPressed.restype = c_int
def get_key_pressed() -> int:
    return _rl.GetKeyPressed()


_rl.IsGamepadAvailable.argtypes = [c_int]
_rl.IsGamepadAvailable.restype = c_bool
def is_gamepad_available(gamepad: int) -> bool:
    return _rl.IsGamepadAvailable(gamepad)


_rl.IsGamepadName.argtypes = [c_int, c_char_p]
_rl.IsGamepadName.restype = c_bool
def is_gamepad_name(gamepad: int, name: bytes) -> bool:
    return _rl.IsGamepadName(gamepad, name)


_rl.GetGamepadName.argtypes = [c_int]
_rl.GetGamepadName.restype = c_char_p
def get_gamepad_name(gamepad: int) -> bytes:
    return _rl.GetGamepadName(gamepad)


_rl.IsGamepadButtonPressed.argtypes = [c_int, c_int]
_rl.IsGamepadButtonPressed.restype = c_bool
def is_gamepad_button_pressed(gamepad: int, button: int) -> bool:
    return _rl.IsGamepadButtonPressed(gamepad, button)


_rl.IsGamepadButtonDown.argtypes = [c_int, c_int]
_rl.IsGamepadButtonDown.restype = c_bool
def is_gamepad_button_down(gamepad: int, button: int) -> bool:
    return _rl.IsGamepadButtonDown(gamepad, button)


_rl.IsGamepadButtonReleased.argtypes = [c_int, c_int]
_rl.IsGamepadButtonReleased.restype = c_bool
def is_gamepad_button_released(gamepad: int, button: int) -> bool:
    return _rl.IsGamepadButtonReleased(gamepad, button)


_rl.IsGamepadButtonUp.argtypes = [c_int, c_int]
_rl.IsGamepadButtonUp.restype = c_bool
def is_gamepad_button_up(gamepad: int, button: int) -> bool:
    return _rl.IsGamepadButtonUp(gamepad, button)


_rl.GetGamepadButtonPressed.argtypes = []
_rl.GetGamepadButtonPressed.restype = c_int
def get_gamepad_button_pressed() -> int:
    return _rl.GetGamepadButtonPressed()


_rl.GetGamepadAxisCount.argtypes = [c_int]
_rl.GetGamepadAxisCount.restype = c_int
def get_gamepad_axis_count(gamepad: int) -> int:
    return _rl.GetGamepadAxisCount(gamepad)


_rl.GetGamepadAxisMovement.argtypes = [c_int, c_int]
_rl.GetGamepadAxisMovement.restype = c_float
def get_gamepad_axis_movement(gamepad: int, axis: int) -> float:
    return _rl.GetGamepadAxisMovement(gamepad, axis)


_rl.IsMouseButtonPressed.argtypes = [c_int]
_rl.IsMouseButtonPressed.restype = c_bool
def is_mouse_button_pressed(button: int) -> bool:
    return _rl.IsMouseButtonPressed(button)


_rl.IsMouseButtonDown.argtypes = [c_int]
_rl.IsMouseButtonDown.restype = c_bool
def is_mouse_button_down(button: int) -> bool:
    return _rl.IsMouseButtonDown(button)


_rl.IsMouseButtonReleased.argtypes = [c_int]
_rl.IsMouseButtonReleased.restype = c_bool
def is_mouse_button_released(button: int) -> bool:
    return _rl.IsMouseButtonReleased(button)


_rl.IsMouseButtonUp.argtypes = [c_int]
_rl.IsMouseButtonUp.restype = c_bool
def is_mouse_button_up(button: int) -> bool:
    return _rl.IsMouseButtonUp(button)


_rl.GetMouseX.argtypes = []
_rl.GetMouseX.restype = c_int
def get_mouse_x() -> int:
    return _rl.GetMouseX()


_rl.GetMouseY.argtypes = []
_rl.GetMouseY.restype = c_int
def get_mouse_y() -> int:
    return _rl.GetMouseY()


_rl.GetMousePosition.argtypes = []
_rl.GetMousePosition.restype = Vector2
def get_mouse_position() -> Vector2:
    return _rl.GetMousePosition()


_rl.SetMousePosition.argtypes = [c_int, c_int]
_rl.SetMousePosition.restype = None
def set_mouse_position(x: int, y: int) -> None:
    _rl.SetMousePosition(x, y)


_rl.SetMouseOffset.argtypes = [c_int, c_int]
_rl.SetMouseOffset.restype = None
def set_mouse_offset(offset_x: int, offset_y: int) -> None:
    _rl.SetMouseOffset(offset_x, offset_y)


_rl.SetMouseScale.argtypes = [c_float, c_float]
_rl.SetMouseScale.restype = None
def set_mouse_scale(scale_x: float, scale_y: float) -> None:
    _rl.SetMouseScale(scale_x, scale_y)


_rl.GetMouseWheelMove.argtypes = []
_rl.GetMouseWheelMove.restype = c_int
def get_mouse_wheel_move() -> int:
    return _rl.GetMouseWheelMove()


_rl.GetTouchX.argtypes = []
_rl.GetTouchX.restype = c_int
def get_touch_x() -> int:
    return _rl.GetTouchX()


_rl.GetTouchY.argtypes = []
_rl.GetTouchY.restype = c_int
def get_touch_y() -> int:
    return _rl.GetTouchY()


_rl.GetTouchPosition.argtypes = [c_int]
_rl.GetTouchPosition.restype = Vector2
def get_touch_position(index: int) -> Vector2:
    return _rl.GetTouchPosition(index)


_rl.SetGesturesEnabled.argtypes = [c_uint]
_rl.SetGesturesEnabled.restype = None
def set_gestures_enabled(gesture_flags: int) -> None:
    _rl.SetGesturesEnabled(gesture_flags)


_rl.IsGestureDetected.argtypes = [c_int]
_rl.IsGestureDetected.restype = c_bool
def is_gesture_detected(gesture: int) -> bool:
    return _rl.IsGestureDetected(gesture)


_rl.GetGestureDetected.argtypes = []
_rl.GetGestureDetected.restype = c_int
def get_gesture_detected() -> int:
    return _rl.GetGestureDetected()


_rl.GetTouchPointsCount.argtypes = []
_rl.GetTouchPointsCount.restype = c_int
def get_touch_points_count() -> int:
    return _rl.GetTouchPointsCount()


_rl.GetGestureHoldDuration.argtypes = []
_rl.GetGestureHoldDuration.restype = c_float
def get_gesture_hold_duration() -> float:
    return _rl.GetGestureHoldDuration()


_rl.GetGestureDragVector.argtypes = []
_rl.GetGestureDragVector.restype = Vector2
def get_gesture_drag_vector() -> Vector2:
    return _rl.GetGestureDragVector()


_rl.GetGestureDragAngle.argtypes = []
_rl.GetGestureDragAngle.restype = c_float
def get_gesture_drag_angle() -> float:
    return _rl.GetGestureDragAngle()


_rl.GetGesturePinchVector.argtypes = []
_rl.GetGesturePinchVector.restype = Vector2
def get_gesture_pinch_vector() -> Vector2:
    return _rl.GetGesturePinchVector()


_rl.GetGesturePinchAngle.argtypes = []
_rl.GetGesturePinchAngle.restype = c_float
def get_gesture_pinch_angle() -> float:
    return _rl.GetGesturePinchAngle()


_rl.SetCameraMode.argtypes = [Camera, c_int]
_rl.SetCameraMode.restype = None
def set_camera_mode(camera: Camera, mode: int) -> None:
    _rl.SetCameraMode(camera, mode)


_rl.UpdateCamera.argtypes = [POINTER(Camera)]
_rl.UpdateCamera.restype = None
def update_camera(camera: POINTER(Camera)) -> None:
    _rl.UpdateCamera(camera)


_rl.SetCameraPanControl.argtypes = [c_int]
_rl.SetCameraPanControl.restype = None
def set_camera_pan_control(pan_key: int) -> None:
    _rl.SetCameraPanControl(pan_key)


_rl.SetCameraAltControl.argtypes = [c_int]
_rl.SetCameraAltControl.restype = None
def set_camera_alt_control(alt_key: int) -> None:
    _rl.SetCameraAltControl(alt_key)


_rl.SetCameraSmoothZoomControl.argtypes = [c_int]
_rl.SetCameraSmoothZoomControl.restype = None
def set_camera_smooth_zoom_control(sz_key: int) -> None:
    _rl.SetCameraSmoothZoomControl(sz_key)


_rl.SetCameraMoveControls.argtypes = [c_int, c_int, c_int, c_int, c_int, c_int]
_rl.SetCameraMoveControls.restype = None
def set_camera_move_controls(front_key: int, back_key: int, right_key: int, left_key: int, up_key: int, down_key: int) -> None:
    _rl.SetCameraMoveControls(front_key, back_key, right_key, left_key, up_key, down_key)


_rl.DrawPixel.argtypes = [c_int, c_int, Color]
_rl.DrawPixel.restype = None
def draw_pixel(pos_x: int, pos_y: int, color: Color) -> None:
    _rl.DrawPixel(pos_x, pos_y, color)


_rl.DrawPixelV.argtypes = [Vector2, Color]
_rl.DrawPixelV.restype = None
def draw_pixel_v(position: Vector2, color: Color) -> None:
    _rl.DrawPixelV(position, color)


_rl.DrawLine.argtypes = [c_int, c_int, c_int, c_int, Color]
_rl.DrawLine.restype = None
def draw_line(start_pos_x: int, start_pos_y: int, end_pos_x: int, end_pos_y: int, color: Color) -> None:
    _rl.DrawLine(start_pos_x, start_pos_y, end_pos_x, end_pos_y, color)


_rl.DrawLineV.argtypes = [Vector2, Vector2, Color]
_rl.DrawLineV.restype = None
def draw_line_v(start_pos: Vector2, end_pos: Vector2, color: Color) -> None:
    _rl.DrawLineV(start_pos, end_pos, color)


_rl.DrawLineEx.argtypes = [Vector2, Vector2, c_float, Color]
_rl.DrawLineEx.restype = None
def draw_line_ex(start_pos: Vector2, end_pos: Vector2, thick: float, color: Color) -> None:
    _rl.DrawLineEx(start_pos, end_pos, thick, color)


_rl.DrawLineBezier.argtypes = [Vector2, Vector2, c_float, Color]
_rl.DrawLineBezier.restype = None
def draw_line_bezier(start_pos: Vector2, end_pos: Vector2, thick: float, color: Color) -> None:
    _rl.DrawLineBezier(start_pos, end_pos, thick, color)


_rl.DrawLineStrip.argtypes = [POINTER(Vector2), c_int, Color]
_rl.DrawLineStrip.restype = None
def draw_line_strip(points: POINTER(Vector2), num_points: int, color: Color) -> None:
    _rl.DrawLineStrip(points, num_points, color)


_rl.DrawCircle.argtypes = [c_int, c_int, c_float, Color]
_rl.DrawCircle.restype = None
def draw_circle(center_x: int, center_y: int, radius: float, color: Color) -> None:
    _rl.DrawCircle(center_x, center_y, radius, color)


_rl.DrawCircleSector.argtypes = [Vector2, c_float, c_int, c_int, c_int, Color]
_rl.DrawCircleSector.restype = None
def draw_circle_sector(center: Vector2, radius: float, start_angle: int, end_angle: int, segments: int, color: Color) -> None:
    _rl.DrawCircleSector(center, radius, start_angle, end_angle, segments, color)


_rl.DrawCircleSectorLines.argtypes = [Vector2, c_float, c_int, c_int, c_int, Color]
_rl.DrawCircleSectorLines.restype = None
def draw_circle_sector_lines(center: Vector2, radius: float, start_angle: int, end_angle: int, segments: int, color: Color) -> None:
    _rl.DrawCircleSectorLines(center, radius, start_angle, end_angle, segments, color)


_rl.DrawCircleGradient.argtypes = [c_int, c_int, c_float, Color, Color]
_rl.DrawCircleGradient.restype = None
def draw_circle_gradient(center_x: int, center_y: int, radius: float, color1: Color, color2: Color) -> None:
    _rl.DrawCircleGradient(center_x, center_y, radius, color1, color2)


_rl.DrawCircleV.argtypes = [Vector2, c_float, Color]
_rl.DrawCircleV.restype = None
def draw_circle_v(center: Vector2, radius: float, color: Color) -> None:
    _rl.DrawCircleV(center, radius, color)


_rl.DrawCircleLines.argtypes = [c_int, c_int, c_float, Color]
_rl.DrawCircleLines.restype = None
def draw_circle_lines(center_x: int, center_y: int, radius: float, color: Color) -> None:
    _rl.DrawCircleLines(center_x, center_y, radius, color)


_rl.DrawRing.argtypes = [Vector2, c_float, c_float, c_int, c_int, c_int, Color]
_rl.DrawRing.restype = None
def draw_ring(center: Vector2, inner_radius: float, outer_radius: float, start_angle: int, end_angle: int, segments: int, color: Color) -> None:
    _rl.DrawRing(center, inner_radius, outer_radius, start_angle, end_angle, segments, color)


_rl.DrawRingLines.argtypes = [Vector2, c_float, c_float, c_int, c_int, c_int, Color]
_rl.DrawRingLines.restype = None
def draw_ring_lines(center: Vector2, inner_radius: float, outer_radius: float, start_angle: int, end_angle: int, segments: int, color: Color) -> None:
    _rl.DrawRingLines(center, inner_radius, outer_radius, start_angle, end_angle, segments, color)


_rl.DrawRectangle.argtypes = [c_int, c_int, c_int, c_int, Color]
_rl.DrawRectangle.restype = None
def draw_rectangle(pos_x: int, pos_y: int, width: int, height: int, color: Color) -> None:
    _rl.DrawRectangle(pos_x, pos_y, width, height, color)


_rl.DrawRectangleV.argtypes = [Vector2, Vector2, Color]
_rl.DrawRectangleV.restype = None
def draw_rectangle_v(position: Vector2, size: Vector2, color: Color) -> None:
    _rl.DrawRectangleV(position, size, color)


_rl.DrawRectangleRec.argtypes = [Rectangle, Color]
_rl.DrawRectangleRec.restype = None
def draw_rectangle_rec(rec: Rectangle, color: Color) -> None:
    _rl.DrawRectangleRec(rec, color)


_rl.DrawRectanglePro.argtypes = [Rectangle, Vector2, c_float, Color]
_rl.DrawRectanglePro.restype = None
def draw_rectangle_pro(rec: Rectangle, origin: Vector2, rotation: float, color: Color) -> None:
    _rl.DrawRectanglePro(rec, origin, rotation, color)


_rl.DrawRectangleGradientV.argtypes = [c_int, c_int, c_int, c_int, Color, Color]
_rl.DrawRectangleGradientV.restype = None
def draw_rectangle_gradient_v(pos_x: int, pos_y: int, width: int, height: int, color1: Color, color2: Color) -> None:
    _rl.DrawRectangleGradientV(pos_x, pos_y, width, height, color1, color2)


_rl.DrawRectangleGradientH.argtypes = [c_int, c_int, c_int, c_int, Color, Color]
_rl.DrawRectangleGradientH.restype = None
def draw_rectangle_gradient_h(pos_x: int, pos_y: int, width: int, height: int, color1: Color, color2: Color) -> None:
    _rl.DrawRectangleGradientH(pos_x, pos_y, width, height, color1, color2)


_rl.DrawRectangleGradientEx.argtypes = [Rectangle, Color, Color, Color, Color]
_rl.DrawRectangleGradientEx.restype = None
def draw_rectangle_gradient_ex(rec: Rectangle, col1: Color, col2: Color, col3: Color, col4: Color) -> None:
    _rl.DrawRectangleGradientEx(rec, col1, col2, col3, col4)


_rl.DrawRectangleLines.argtypes = [c_int, c_int, c_int, c_int, Color]
_rl.DrawRectangleLines.restype = None
def draw_rectangle_lines(pos_x: int, pos_y: int, width: int, height: int, color: Color) -> None:
    _rl.DrawRectangleLines(pos_x, pos_y, width, height, color)


_rl.DrawRectangleLinesEx.argtypes = [Rectangle, c_int, Color]
_rl.DrawRectangleLinesEx.restype = None
def draw_rectangle_lines_ex(rec: Rectangle, line_thick: int, color: Color) -> None:
    _rl.DrawRectangleLinesEx(rec, line_thick, color)


_rl.DrawRectangleRounded.argtypes = [Rectangle, c_float, c_int, Color]
_rl.DrawRectangleRounded.restype = None
def draw_rectangle_rounded(rec: Rectangle, roundness: float, segments: int, color: Color) -> None:
    _rl.DrawRectangleRounded(rec, roundness, segments, color)


_rl.DrawRectangleRoundedLines.argtypes = [Rectangle, c_float, c_int, c_int, Color]
_rl.DrawRectangleRoundedLines.restype = None
def draw_rectangle_rounded_lines(rec: Rectangle, roundness: float, segments: int, line_thick: int, color: Color) -> None:
    _rl.DrawRectangleRoundedLines(rec, roundness, segments, line_thick, color)


_rl.DrawTriangle.argtypes = [Vector2, Vector2, Vector2, Color]
_rl.DrawTriangle.restype = None
def draw_triangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) -> None:
    _rl.DrawTriangle(v1, v2, v3, color)


_rl.DrawTriangleLines.argtypes = [Vector2, Vector2, Vector2, Color]
_rl.DrawTriangleLines.restype = None
def draw_triangle_lines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) -> None:
    _rl.DrawTriangleLines(v1, v2, v3, color)


_rl.DrawTriangleFan.argtypes = [POINTER(Vector2), c_int, Color]
_rl.DrawTriangleFan.restype = None
def draw_triangle_fan(points: POINTER(Vector2), num_points: int, color: Color) -> None:
    _rl.DrawTriangleFan(points, num_points, color)


_rl.DrawTriangleStrip.argtypes = [POINTER(Vector2), c_int, Color]
_rl.DrawTriangleStrip.restype = None
def draw_triangle_strip(points: POINTER(Vector2), points_count: int, color: Color) -> None:
    _rl.DrawTriangleStrip(points, points_count, color)


_rl.DrawPoly.argtypes = [Vector2, c_int, c_float, c_float, Color]
_rl.DrawPoly.restype = None
def draw_poly(center: Vector2, sides: int, radius: float, rotation: float, color: Color) -> None:
    _rl.DrawPoly(center, sides, radius, rotation, color)


_rl.DrawPolyLines.argtypes = [Vector2, c_int, c_float, c_float, Color]
_rl.DrawPolyLines.restype = None
def draw_poly_lines(center: Vector2, sides: int, radius: float, rotation: float, color: Color) -> None:
    _rl.DrawPolyLines(center, sides, radius, rotation, color)


_rl.SetShapesTexture.argtypes = [Texture2D, Rectangle]
_rl.SetShapesTexture.restype = None
def set_shapes_texture(texture: Texture2D, source: Rectangle) -> None:
    _rl.SetShapesTexture(texture, source)


_rl.CheckCollisionRecs.argtypes = [Rectangle, Rectangle]
_rl.CheckCollisionRecs.restype = c_bool
def check_collision_recs(rec1: Rectangle, rec2: Rectangle) -> bool:
    return _rl.CheckCollisionRecs(rec1, rec2)


_rl.CheckCollisionCircles.argtypes = [Vector2, c_float, Vector2, c_float]
_rl.CheckCollisionCircles.restype = c_bool
def check_collision_circles(center1: Vector2, radius1: float, center2: Vector2, radius2: float) -> bool:
    return _rl.CheckCollisionCircles(center1, radius1, center2, radius2)


_rl.CheckCollisionCircleRec.argtypes = [Vector2, c_float, Rectangle]
_rl.CheckCollisionCircleRec.restype = c_bool
def check_collision_circle_rec(center: Vector2, radius: float, rec: Rectangle) -> bool:
    return _rl.CheckCollisionCircleRec(center, radius, rec)


_rl.GetCollisionRec.argtypes = [Rectangle, Rectangle]
_rl.GetCollisionRec.restype = Rectangle
def get_collision_rec(rec1: Rectangle, rec2: Rectangle) -> Rectangle:
    return _rl.GetCollisionRec(rec1, rec2)


_rl.CheckCollisionPointRec.argtypes = [Vector2, Rectangle]
_rl.CheckCollisionPointRec.restype = c_bool
def check_collision_point_rec(point: Vector2, rec: Rectangle) -> bool:
    return _rl.CheckCollisionPointRec(point, rec)


_rl.CheckCollisionPointCircle.argtypes = [Vector2, Vector2, c_float]
_rl.CheckCollisionPointCircle.restype = c_bool
def check_collision_point_circle(point: Vector2, center: Vector2, radius: float) -> bool:
    return _rl.CheckCollisionPointCircle(point, center, radius)


_rl.CheckCollisionPointTriangle.argtypes = [Vector2, Vector2, Vector2, Vector2]
_rl.CheckCollisionPointTriangle.restype = c_bool
def check_collision_point_triangle(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2) -> bool:
    return _rl.CheckCollisionPointTriangle(point, p1, p2, p3)


_rl.LoadImage.argtypes = [c_char_p]
_rl.LoadImage.restype = Image
def load_image(file_name: bytes) -> Image:
    return _rl.LoadImage(file_name)


_rl.LoadImageEx.argtypes = [POINTER(Color), c_int, c_int]
_rl.LoadImageEx.restype = Image
def load_image_ex(pixels: POINTER(Color), width: int, height: int) -> Image:
    return _rl.LoadImageEx(pixels, width, height)


_rl.LoadImagePro.argtypes = [c_void_p, c_int, c_int, c_int]
_rl.LoadImagePro.restype = Image
def load_image_pro(data: int, width: int, height: int, format: int) -> Image:
    return _rl.LoadImagePro(data, width, height, format)


_rl.LoadImageRaw.argtypes = [c_char_p, c_int, c_int, c_int, c_int]
_rl.LoadImageRaw.restype = Image
def load_image_raw(file_name: bytes, width: int, height: int, format: int, header_size: int) -> Image:
    return _rl.LoadImageRaw(file_name, width, height, format, header_size)


_rl.ExportImage.argtypes = [Image, c_char_p]
_rl.ExportImage.restype = None
def export_image(image: Image, file_name: bytes) -> None:
    _rl.ExportImage(image, file_name)


_rl.ExportImageAsCode.argtypes = [Image, c_char_p]
_rl.ExportImageAsCode.restype = None
def export_image_as_code(image: Image, file_name: bytes) -> None:
    _rl.ExportImageAsCode(image, file_name)


_rl.LoadTexture.argtypes = [c_char_p]
_rl.LoadTexture.restype = Texture2D
def load_texture(file_name: bytes) -> Texture2D:
    return _rl.LoadTexture(file_name)


_rl.LoadTextureFromImage.argtypes = [Image]
_rl.LoadTextureFromImage.restype = Texture2D
def load_texture_from_image(image: Image) -> Texture2D:
    return _rl.LoadTextureFromImage(image)


_rl.LoadTextureCubemap.argtypes = [Image, c_int]
_rl.LoadTextureCubemap.restype = TextureCubemap
def load_texture_cubemap(image: Image, layout_type: int) -> TextureCubemap:
    return _rl.LoadTextureCubemap(image, layout_type)


_rl.LoadRenderTexture.argtypes = [c_int, c_int]
_rl.LoadRenderTexture.restype = RenderTexture2D
def load_render_texture(width: int, height: int) -> RenderTexture2D:
    return _rl.LoadRenderTexture(width, height)


_rl.UnloadImage.argtypes = [Image]
_rl.UnloadImage.restype = None
def unload_image(image: Image) -> None:
    _rl.UnloadImage(image)


_rl.UnloadTexture.argtypes = [Texture2D]
_rl.UnloadTexture.restype = None
def unload_texture(texture: Texture2D) -> None:
    _rl.UnloadTexture(texture)


_rl.UnloadRenderTexture.argtypes = [RenderTexture2D]
_rl.UnloadRenderTexture.restype = None
def unload_render_texture(target: RenderTexture2D) -> None:
    _rl.UnloadRenderTexture(target)


_rl.GetImageData.argtypes = [Image]
_rl.GetImageData.restype = POINTER(Color)
def get_image_data(image: Image) -> POINTER(Color):
    return _rl.GetImageData(image)


_rl.GetImageDataNormalized.argtypes = [Image]
_rl.GetImageDataNormalized.restype = POINTER(Vector4)
def get_image_data_normalized(image: Image) -> POINTER(Vector4):
    return _rl.GetImageDataNormalized(image)


_rl.GetImageAlphaBorder.argtypes = [Image, c_float]
_rl.GetImageAlphaBorder.restype = Rectangle
def get_image_alpha_border(image: Image, threshold: float) -> Rectangle:
    return _rl.GetImageAlphaBorder(image, threshold)


_rl.GetPixelDataSize.argtypes = [c_int, c_int, c_int]
_rl.GetPixelDataSize.restype = c_int
def get_pixel_data_size(width: int, height: int, format: int) -> int:
    return _rl.GetPixelDataSize(width, height, format)


_rl.GetTextureData.argtypes = [Texture2D]
_rl.GetTextureData.restype = Image
def get_texture_data(texture: Texture2D) -> Image:
    return _rl.GetTextureData(texture)


_rl.GetScreenData.argtypes = []
_rl.GetScreenData.restype = Image
def get_screen_data() -> Image:
    return _rl.GetScreenData()


_rl.UpdateTexture.argtypes = [Texture2D, c_void_p]
_rl.UpdateTexture.restype = None
def update_texture(texture: Texture2D, pixels: int) -> None:
    _rl.UpdateTexture(texture, pixels)


_rl.ImageCopy.argtypes = [Image]
_rl.ImageCopy.restype = Image
def image_copy(image: Image) -> Image:
    return _rl.ImageCopy(image)


_rl.ImageFromImage.argtypes = [Image, Rectangle]
_rl.ImageFromImage.restype = Image
def image_from_image(image: Image, rec: Rectangle) -> Image:
    return _rl.ImageFromImage(image, rec)


_rl.ImageToPOT.argtypes = [POINTER(Image), Color]
_rl.ImageToPOT.restype = None
def image_to_pot(image: POINTER(Image), fill_color: Color) -> None:
    _rl.ImageToPOT(image, fill_color)


_rl.ImageFormat.argtypes = [POINTER(Image), c_int]
_rl.ImageFormat.restype = None
def image_format(image: POINTER(Image), new_format: int) -> None:
    _rl.ImageFormat(image, new_format)


_rl.ImageAlphaMask.argtypes = [POINTER(Image), Image]
_rl.ImageAlphaMask.restype = None
def image_alpha_mask(image: POINTER(Image), alpha_mask: Image) -> None:
    _rl.ImageAlphaMask(image, alpha_mask)


_rl.ImageAlphaClear.argtypes = [POINTER(Image), Color, c_float]
_rl.ImageAlphaClear.restype = None
def image_alpha_clear(image: POINTER(Image), color: Color, threshold: float) -> None:
    _rl.ImageAlphaClear(image, color, threshold)


_rl.ImageAlphaCrop.argtypes = [POINTER(Image), c_float]
_rl.ImageAlphaCrop.restype = None
def image_alpha_crop(image: POINTER(Image), threshold: float) -> None:
    _rl.ImageAlphaCrop(image, threshold)


_rl.ImageAlphaPremultiply.argtypes = [POINTER(Image)]
_rl.ImageAlphaPremultiply.restype = None
def image_alpha_premultiply(image: POINTER(Image)) -> None:
    _rl.ImageAlphaPremultiply(image)


_rl.ImageCrop.argtypes = [POINTER(Image), Rectangle]
_rl.ImageCrop.restype = None
def image_crop(image: POINTER(Image), crop: Rectangle) -> None:
    _rl.ImageCrop(image, crop)


_rl.ImageResize.argtypes = [POINTER(Image), c_int, c_int]
_rl.ImageResize.restype = None
def image_resize(image: POINTER(Image), new_width: int, new_height: int) -> None:
    _rl.ImageResize(image, new_width, new_height)


_rl.ImageResizeNN.argtypes = [POINTER(Image), c_int]
_rl.ImageResizeNN.restype = None
def image_resize_nn(image: POINTER(Image), new_width: int) -> None:
    _rl.ImageResizeNN(image, new_width)


_rl.ImageResizeCanvas.argtypes = [POINTER(Image), c_int, c_int, c_int, c_int, Color]
_rl.ImageResizeCanvas.restype = None
def image_resize_canvas(image: POINTER(Image), new_width: int, new_height: int, offset_x: int, offset_y: int, color: Color) -> None:
    _rl.ImageResizeCanvas(image, new_width, new_height, offset_x, offset_y, color)


_rl.ImageMipmaps.argtypes = [POINTER(Image)]
_rl.ImageMipmaps.restype = None
def image_mipmaps(image: POINTER(Image)) -> None:
    _rl.ImageMipmaps(image)


_rl.ImageDither.argtypes = [POINTER(Image), c_int, c_int, c_int, c_int]
_rl.ImageDither.restype = None
def image_dither(image: POINTER(Image), r_bpp: int, g_bpp: int, b_bpp: int, a_bpp: int) -> None:
    _rl.ImageDither(image, r_bpp, g_bpp, b_bpp, a_bpp)


_rl.ImageExtractPalette.argtypes = [Image, c_int, POINTER(c_int)]
_rl.ImageExtractPalette.restype = POINTER(Color)
def image_extract_palette(image: Image, max_palette_size: int, extract_count: POINTER(c_int)) -> POINTER(Color):
    return _rl.ImageExtractPalette(image, max_palette_size, extract_count)


_rl.ImageText.argtypes = [c_char_p, c_int, Color]
_rl.ImageText.restype = Image
def image_text(text: bytes, font_size: int, color: Color) -> Image:
    return _rl.ImageText(text, font_size, color)


_rl.ImageTextEx.argtypes = [Font, c_char_p, c_float, c_float, Color]
_rl.ImageTextEx.restype = Image
def image_text_ex(font: Font, text: bytes, font_size: float, spacing: float, tint: Color) -> Image:
    return _rl.ImageTextEx(font, text, font_size, spacing, tint)


_rl.ImageDraw.argtypes = [POINTER(Image), Image, Rectangle, Rectangle, Color]
_rl.ImageDraw.restype = None
def image_draw(dst: POINTER(Image), src: Image, src_rec: Rectangle, dst_rec: Rectangle, tint: Color) -> None:
    _rl.ImageDraw(dst, src, src_rec, dst_rec, tint)


_rl.ImageDrawRectangle.argtypes = [POINTER(Image), Rectangle, Color]
_rl.ImageDrawRectangle.restype = None
def image_draw_rectangle(dst: POINTER(Image), rec: Rectangle, color: Color) -> None:
    _rl.ImageDrawRectangle(dst, rec, color)


_rl.ImageDrawRectangleLines.argtypes = [POINTER(Image), Rectangle, c_int, Color]
_rl.ImageDrawRectangleLines.restype = None
def image_draw_rectangle_lines(dst: POINTER(Image), rec: Rectangle, thick: int, color: Color) -> None:
    _rl.ImageDrawRectangleLines(dst, rec, thick, color)


_rl.ImageDrawText.argtypes = [POINTER(Image), Vector2, c_char_p, c_int, Color]
_rl.ImageDrawText.restype = None
def image_draw_text(dst: POINTER(Image), position: Vector2, text: bytes, font_size: int, color: Color) -> None:
    _rl.ImageDrawText(dst, position, text, font_size, color)


_rl.ImageDrawTextEx.argtypes = [POINTER(Image), Vector2, Font, c_char_p, c_float, c_float, Color]
_rl.ImageDrawTextEx.restype = None
def image_draw_text_ex(dst: POINTER(Image), position: Vector2, font: Font, text: bytes, font_size: float, spacing: float, color: Color) -> None:
    _rl.ImageDrawTextEx(dst, position, font, text, font_size, spacing, color)


_rl.ImageFlipVertical.argtypes = [POINTER(Image)]
_rl.ImageFlipVertical.restype = None
def image_flip_vertical(image: POINTER(Image)) -> None:
    _rl.ImageFlipVertical(image)


_rl.ImageFlipHorizontal.argtypes = [POINTER(Image)]
_rl.ImageFlipHorizontal.restype = None
def image_flip_horizontal(image: POINTER(Image)) -> None:
    _rl.ImageFlipHorizontal(image)


_rl.ImageRotateCW.argtypes = [POINTER(Image)]
_rl.ImageRotateCW.restype = None
def image_rotate_cw(image: POINTER(Image)) -> None:
    _rl.ImageRotateCW(image)


_rl.ImageRotateCCW.argtypes = [POINTER(Image)]
_rl.ImageRotateCCW.restype = None
def image_rotate_ccw(image: POINTER(Image)) -> None:
    _rl.ImageRotateCCW(image)


_rl.ImageColorTint.argtypes = [POINTER(Image), Color]
_rl.ImageColorTint.restype = None
def image_color_tint(image: POINTER(Image), color: Color) -> None:
    _rl.ImageColorTint(image, color)


_rl.ImageColorInvert.argtypes = [POINTER(Image)]
_rl.ImageColorInvert.restype = None
def image_color_invert(image: POINTER(Image)) -> None:
    _rl.ImageColorInvert(image)


_rl.ImageColorGrayscale.argtypes = [POINTER(Image)]
_rl.ImageColorGrayscale.restype = None
def image_color_grayscale(image: POINTER(Image)) -> None:
    _rl.ImageColorGrayscale(image)


_rl.ImageColorContrast.argtypes = [POINTER(Image), c_float]
_rl.ImageColorContrast.restype = None
def image_color_contrast(image: POINTER(Image), contrast: float) -> None:
    _rl.ImageColorContrast(image, contrast)


_rl.ImageColorBrightness.argtypes = [POINTER(Image), c_int]
_rl.ImageColorBrightness.restype = None
def image_color_brightness(image: POINTER(Image), brightness: int) -> None:
    _rl.ImageColorBrightness(image, brightness)


_rl.ImageColorReplace.argtypes = [POINTER(Image), Color, Color]
_rl.ImageColorReplace.restype = None
def image_color_replace(image: POINTER(Image), color: Color, replace: Color) -> None:
    _rl.ImageColorReplace(image, color, replace)


_rl.GenImageColor.argtypes = [c_int, c_int, Color]
_rl.GenImageColor.restype = Image
def gen_image_color(width: int, height: int, color: Color) -> Image:
    return _rl.GenImageColor(width, height, color)


_rl.GenImageGradientV.argtypes = [c_int, c_int, Color, Color]
_rl.GenImageGradientV.restype = Image
def gen_image_gradient_v(width: int, height: int, top: Color, bottom: Color) -> Image:
    return _rl.GenImageGradientV(width, height, top, bottom)


_rl.GenImageGradientH.argtypes = [c_int, c_int, Color, Color]
_rl.GenImageGradientH.restype = Image
def gen_image_gradient_h(width: int, height: int, left: Color, right: Color) -> Image:
    return _rl.GenImageGradientH(width, height, left, right)


_rl.GenImageGradientRadial.argtypes = [c_int, c_int, c_float, Color, Color]
_rl.GenImageGradientRadial.restype = Image
def gen_image_gradient_radial(width: int, height: int, density: float, inner: Color, outer: Color) -> Image:
    return _rl.GenImageGradientRadial(width, height, density, inner, outer)


_rl.GenImageChecked.argtypes = [c_int, c_int, c_int, c_int, Color, Color]
_rl.GenImageChecked.restype = Image
def gen_image_checked(width: int, height: int, checks_x: int, checks_y: int, col1: Color, col2: Color) -> Image:
    return _rl.GenImageChecked(width, height, checks_x, checks_y, col1, col2)


_rl.GenImageWhiteNoise.argtypes = [c_int, c_int, c_float]
_rl.GenImageWhiteNoise.restype = Image
def gen_image_white_noise(width: int, height: int, factor: float) -> Image:
    return _rl.GenImageWhiteNoise(width, height, factor)


_rl.GenImagePerlinNoise.argtypes = [c_int, c_int, c_int, c_int, c_float]
_rl.GenImagePerlinNoise.restype = Image
def gen_image_perlin_noise(width: int, height: int, offset_x: int, offset_y: int, scale: float) -> Image:
    return _rl.GenImagePerlinNoise(width, height, offset_x, offset_y, scale)


_rl.GenImageCellular.argtypes = [c_int, c_int, c_int]
_rl.GenImageCellular.restype = Image
def gen_image_cellular(width: int, height: int, tile_size: int) -> Image:
    return _rl.GenImageCellular(width, height, tile_size)


_rl.GenTextureMipmaps.argtypes = [POINTER(Texture2D)]
_rl.GenTextureMipmaps.restype = None
def gen_texture_mipmaps(texture: POINTER(Texture2D)) -> None:
    _rl.GenTextureMipmaps(texture)


_rl.SetTextureFilter.argtypes = [Texture2D, c_int]
_rl.SetTextureFilter.restype = None
def set_texture_filter(texture: Texture2D, filter_mode: int) -> None:
    _rl.SetTextureFilter(texture, filter_mode)


_rl.SetTextureWrap.argtypes = [Texture2D, c_int]
_rl.SetTextureWrap.restype = None
def set_texture_wrap(texture: Texture2D, wrap_mode: int) -> None:
    _rl.SetTextureWrap(texture, wrap_mode)


_rl.DrawTexture.argtypes = [Texture2D, c_int, c_int, Color]
_rl.DrawTexture.restype = None
def draw_texture(texture: Texture2D, pos_x: int, pos_y: int, tint: Color) -> None:
    _rl.DrawTexture(texture, pos_x, pos_y, tint)


_rl.DrawTextureV.argtypes = [Texture2D, Vector2, Color]
_rl.DrawTextureV.restype = None
def draw_texture_v(texture: Texture2D, position: Vector2, tint: Color) -> None:
    _rl.DrawTextureV(texture, position, tint)


_rl.DrawTextureEx.argtypes = [Texture2D, Vector2, c_float, c_float, Color]
_rl.DrawTextureEx.restype = None
def draw_texture_ex(texture: Texture2D, position: Vector2, rotation: float, scale: float, tint: Color) -> None:
    _rl.DrawTextureEx(texture, position, rotation, scale, tint)


_rl.DrawTextureRec.argtypes = [Texture2D, Rectangle, Vector2, Color]
_rl.DrawTextureRec.restype = None
def draw_texture_rec(texture: Texture2D, source_rec: Rectangle, position: Vector2, tint: Color) -> None:
    _rl.DrawTextureRec(texture, source_rec, position, tint)


_rl.DrawTextureQuad.argtypes = [Texture2D, Vector2, Vector2, Rectangle, Color]
_rl.DrawTextureQuad.restype = None
def draw_texture_quad(texture: Texture2D, tiling: Vector2, offset: Vector2, quad: Rectangle, tint: Color) -> None:
    _rl.DrawTextureQuad(texture, tiling, offset, quad, tint)


_rl.DrawTexturePro.argtypes = [Texture2D, Rectangle, Rectangle, Vector2, c_float, Color]
_rl.DrawTexturePro.restype = None
def draw_texture_pro(texture: Texture2D, source_rec: Rectangle, dest_rec: Rectangle, origin: Vector2, rotation: float, tint: Color) -> None:
    _rl.DrawTexturePro(texture, source_rec, dest_rec, origin, rotation, tint)


_rl.DrawTextureNPatch.argtypes = [Texture2D, NPatchInfo, Rectangle, Vector2, c_float, Color]
_rl.DrawTextureNPatch.restype = None
def draw_texture_npatch(texture: Texture2D, n_patch_info: NPatchInfo, dest_rec: Rectangle, origin: Vector2, rotation: float, tint: Color) -> None:
    _rl.DrawTextureNPatch(texture, n_patch_info, dest_rec, origin, rotation, tint)


_rl.GetFontDefault.argtypes = []
_rl.GetFontDefault.restype = Font
def get_font_default() -> Font:
    return _rl.GetFontDefault()


_rl.LoadFont.argtypes = [c_char_p]
_rl.LoadFont.restype = Font
def load_font(file_name: bytes) -> Font:
    return _rl.LoadFont(file_name)


_rl.LoadFontEx.argtypes = [c_char_p, c_int, POINTER(c_int), c_int]
_rl.LoadFontEx.restype = Font
def load_font_ex(file_name: bytes, font_size: int, font_chars: POINTER(c_int), chars_count: int) -> Font:
    return _rl.LoadFontEx(file_name, font_size, font_chars, chars_count)


_rl.LoadFontFromImage.argtypes = [Image, Color, c_int]
_rl.LoadFontFromImage.restype = Font
def load_font_from_image(image: Image, key: Color, first_char: int) -> Font:
    return _rl.LoadFontFromImage(image, key, first_char)


_rl.LoadFontData.argtypes = [c_char_p, c_int, POINTER(c_int), c_int, c_int]
_rl.LoadFontData.restype = POINTER(CharInfo)
def load_font_data(file_name: bytes, font_size: int, font_chars: POINTER(c_int), chars_count: int, type: int) -> POINTER(CharInfo):
    return _rl.LoadFontData(file_name, font_size, font_chars, chars_count, type)


_rl.GenImageFontAtlas.argtypes = [POINTER(CharInfo), POINTER(POINTER(Rectangle)), c_int, c_int, c_int, c_int]
_rl.GenImageFontAtlas.restype = Image
def gen_image_font_atlas(chars: POINTER(CharInfo), recs: POINTER(POINTER(Rectangle)), chars_count: int, font_size: int, padding: int, pack_method: int) -> Image:
    return _rl.GenImageFontAtlas(chars, recs, chars_count, font_size, padding, pack_method)


_rl.UnloadFont.argtypes = [Font]
_rl.UnloadFont.restype = None
def unload_font(font: Font) -> None:
    _rl.UnloadFont(font)


_rl.DrawFPS.argtypes = [c_int, c_int]
_rl.DrawFPS.restype = None
def draw_fps(pos_x: int, pos_y: int) -> None:
    _rl.DrawFPS(pos_x, pos_y)


_rl.DrawText.argtypes = [c_char_p, c_int, c_int, c_int, Color]
_rl.DrawText.restype = None
def draw_text(text: bytes, pos_x: int, pos_y: int, font_size: int, color: Color) -> None:
    _rl.DrawText(text, pos_x, pos_y, font_size, color)


_rl.DrawTextEx.argtypes = [Font, c_char_p, Vector2, c_float, c_float, Color]
_rl.DrawTextEx.restype = None
def draw_text_ex(font: Font, text: bytes, position: Vector2, font_size: float, spacing: float, tint: Color) -> None:
    _rl.DrawTextEx(font, text, position, font_size, spacing, tint)


_rl.DrawTextRec.argtypes = [Font, c_char_p, Rectangle, c_float, c_float, c_bool, Color]
_rl.DrawTextRec.restype = None
def draw_text_rec(font: Font, text: bytes, rec: Rectangle, font_size: float, spacing: float, word_wrap: bool, tint: Color) -> None:
    _rl.DrawTextRec(font, text, rec, font_size, spacing, word_wrap, tint)


_rl.DrawTextCodepoint.argtypes = [Font, c_int, Vector2, c_float, Color]
_rl.DrawTextCodepoint.restype = None
def draw_text_codepoint(font: Font, codepoint: int, position: Vector2, scale: float, tint: Color) -> None:
    _rl.DrawTextCodepoint(font, codepoint, position, scale, tint)


_rl.MeasureText.argtypes = [c_char_p, c_int]
_rl.MeasureText.restype = c_int
def measure_text(text: bytes, font_size: int) -> int:
    return _rl.MeasureText(text, font_size)


_rl.MeasureTextEx.argtypes = [Font, c_char_p, c_float, c_float]
_rl.MeasureTextEx.restype = Vector2
def measure_text_ex(font: Font, text: bytes, font_size: float, spacing: float) -> Vector2:
    return _rl.MeasureTextEx(font, text, font_size, spacing)


_rl.GetGlyphIndex.argtypes = [Font, c_int]
_rl.GetGlyphIndex.restype = c_int
def get_glyph_index(font: Font, codepoint: int) -> int:
    return _rl.GetGlyphIndex(font, codepoint)


_rl.TextIsEqual.argtypes = [c_char_p, c_char_p]
_rl.TextIsEqual.restype = c_bool
def text_is_equal(text1: bytes, text2: bytes) -> bool:
    return _rl.TextIsEqual(text1, text2)


_rl.TextLength.argtypes = [c_char_p]
_rl.TextLength.restype = c_uint
def text_length(text: bytes) -> int:
    return _rl.TextLength(text)


_rl.TextFormat.argtypes = [c_char_p]
_rl.TextFormat.restype = c_char_p
def text_format(text: bytes, *args) -> bytes:
    return _rl.TextFormat(text)


_rl.TextSubtext.argtypes = [c_char_p, c_int, c_int]
_rl.TextSubtext.restype = c_char_p
def text_subtext(text: bytes, position: int, length: int) -> bytes:
    return _rl.TextSubtext(text, position, length)


_rl.TextReplace.argtypes = [c_char_p, c_char_p, c_char_p]
_rl.TextReplace.restype = c_char_p
def text_replace(text: bytes, replace: bytes, by: bytes) -> bytes:
    return _rl.TextReplace(text, replace, by)


_rl.TextInsert.argtypes = [c_char_p, c_char_p, c_int]
_rl.TextInsert.restype = c_char_p
def text_insert(text: bytes, insert: bytes, position: int) -> bytes:
    return _rl.TextInsert(text, insert, position)


_rl.TextJoin.argtypes = [POINTER(c_char_p), c_int, c_char_p]
_rl.TextJoin.restype = c_char_p
def text_join(text_list: POINTER(c_char_p), count: int, delimiter: bytes) -> bytes:
    return _rl.TextJoin(text_list, count, delimiter)


_rl.TextSplit.argtypes = [c_char_p, c_char, POINTER(c_int)]
_rl.TextSplit.restype = POINTER(c_char_p)
def text_split(text: bytes, delimiter: bytes, count: POINTER(c_int)) -> POINTER(c_char_p):
    return _rl.TextSplit(text, delimiter, count)


_rl.TextAppend.argtypes = [c_char_p, c_char_p, POINTER(c_int)]
_rl.TextAppend.restype = None
def text_append(text: bytes, append: bytes, position: POINTER(c_int)) -> None:
    _rl.TextAppend(text, append, position)


_rl.TextFindIndex.argtypes = [c_char_p, c_char_p]
_rl.TextFindIndex.restype = c_int
def text_find_index(text: bytes, find: bytes) -> int:
    return _rl.TextFindIndex(text, find)


_rl.TextToUpper.argtypes = [c_char_p]
_rl.TextToUpper.restype = c_char_p
def text_to_upper(text: bytes) -> bytes:
    return _rl.TextToUpper(text)


_rl.TextToLower.argtypes = [c_char_p]
_rl.TextToLower.restype = c_char_p
def text_to_lower(text: bytes) -> bytes:
    return _rl.TextToLower(text)


_rl.TextToPascal.argtypes = [c_char_p]
_rl.TextToPascal.restype = c_char_p
def text_to_pascal(text: bytes) -> bytes:
    return _rl.TextToPascal(text)


_rl.TextToInteger.argtypes = [c_char_p]
_rl.TextToInteger.restype = c_int
def text_to_integer(text: bytes) -> int:
    return _rl.TextToInteger(text)


_rl.TextToUtf8.argtypes = [POINTER(c_int), c_int]
_rl.TextToUtf8.restype = c_char_p
def text_to_utf8(codepoints: POINTER(c_int), length: int) -> bytes:
    return _rl.TextToUtf8(codepoints, length)


_rl.GetCodepoints.argtypes = [c_char_p, POINTER(c_int)]
_rl.GetCodepoints.restype = POINTER(c_int)
def get_codepoints(text: bytes, count: POINTER(c_int)) -> POINTER(c_int):
    return _rl.GetCodepoints(text, count)


_rl.GetCodepointsCount.argtypes = [c_char_p]
_rl.GetCodepointsCount.restype = c_int
def get_codepoints_count(text: bytes) -> int:
    return _rl.GetCodepointsCount(text)


_rl.GetNextCodepoint.argtypes = [c_char_p, POINTER(c_int)]
_rl.GetNextCodepoint.restype = c_int
def get_next_codepoint(text: bytes, bytes_processed: POINTER(c_int)) -> int:
    return _rl.GetNextCodepoint(text, bytes_processed)


_rl.CodepointToUtf8.argtypes = [c_int, POINTER(c_int)]
_rl.CodepointToUtf8.restype = c_char_p
def codepoint_to_utf8(codepoint: int, byte_length: POINTER(c_int)) -> bytes:
    return _rl.CodepointToUtf8(codepoint, byte_length)


_rl.DrawLine3D.argtypes = [Vector3, Vector3, Color]
_rl.DrawLine3D.restype = None
def draw_line3_d(start_pos: Vector3, end_pos: Vector3, color: Color) -> None:
    _rl.DrawLine3D(start_pos, end_pos, color)


_rl.DrawCircle3D.argtypes = [Vector3, c_float, Vector3, c_float, Color]
_rl.DrawCircle3D.restype = None
def draw_circle3_d(center: Vector3, radius: float, rotation_axis: Vector3, rotation_angle: float, color: Color) -> None:
    _rl.DrawCircle3D(center, radius, rotation_axis, rotation_angle, color)


_rl.DrawCube.argtypes = [Vector3, c_float, c_float, c_float, Color]
_rl.DrawCube.restype = None
def draw_cube(position: Vector3, width: float, height: float, length: float, color: Color) -> None:
    _rl.DrawCube(position, width, height, length, color)


_rl.DrawCubeV.argtypes = [Vector3, Vector3, Color]
_rl.DrawCubeV.restype = None
def draw_cube_v(position: Vector3, size: Vector3, color: Color) -> None:
    _rl.DrawCubeV(position, size, color)


_rl.DrawCubeWires.argtypes = [Vector3, c_float, c_float, c_float, Color]
_rl.DrawCubeWires.restype = None
def draw_cube_wires(position: Vector3, width: float, height: float, length: float, color: Color) -> None:
    _rl.DrawCubeWires(position, width, height, length, color)


_rl.DrawCubeWiresV.argtypes = [Vector3, Vector3, Color]
_rl.DrawCubeWiresV.restype = None
def draw_cube_wires_v(position: Vector3, size: Vector3, color: Color) -> None:
    _rl.DrawCubeWiresV(position, size, color)


_rl.DrawCubeTexture.argtypes = [Texture2D, Vector3, c_float, c_float, c_float, Color]
_rl.DrawCubeTexture.restype = None
def draw_cube_texture(texture: Texture2D, position: Vector3, width: float, height: float, length: float, color: Color) -> None:
    _rl.DrawCubeTexture(texture, position, width, height, length, color)


_rl.DrawSphere.argtypes = [Vector3, c_float, Color]
_rl.DrawSphere.restype = None
def draw_sphere(center_pos: Vector3, radius: float, color: Color) -> None:
    _rl.DrawSphere(center_pos, radius, color)


_rl.DrawSphereEx.argtypes = [Vector3, c_float, c_int, c_int, Color]
_rl.DrawSphereEx.restype = None
def draw_sphere_ex(center_pos: Vector3, radius: float, rings: int, slices: int, color: Color) -> None:
    _rl.DrawSphereEx(center_pos, radius, rings, slices, color)


_rl.DrawSphereWires.argtypes = [Vector3, c_float, c_int, c_int, Color]
_rl.DrawSphereWires.restype = None
def draw_sphere_wires(center_pos: Vector3, radius: float, rings: int, slices: int, color: Color) -> None:
    _rl.DrawSphereWires(center_pos, radius, rings, slices, color)


_rl.DrawCylinder.argtypes = [Vector3, c_float, c_float, c_float, c_int, Color]
_rl.DrawCylinder.restype = None
def draw_cylinder(position: Vector3, radius_top: float, radius_bottom: float, height: float, slices: int, color: Color) -> None:
    _rl.DrawCylinder(position, radius_top, radius_bottom, height, slices, color)


_rl.DrawCylinderWires.argtypes = [Vector3, c_float, c_float, c_float, c_int, Color]
_rl.DrawCylinderWires.restype = None
def draw_cylinder_wires(position: Vector3, radius_top: float, radius_bottom: float, height: float, slices: int, color: Color) -> None:
    _rl.DrawCylinderWires(position, radius_top, radius_bottom, height, slices, color)


_rl.DrawPlane.argtypes = [Vector3, Vector2, Color]
_rl.DrawPlane.restype = None
def draw_plane(center_pos: Vector3, size: Vector2, color: Color) -> None:
    _rl.DrawPlane(center_pos, size, color)


_rl.DrawRay.argtypes = [Ray, Color]
_rl.DrawRay.restype = None
def draw_ray(ray: Ray, color: Color) -> None:
    _rl.DrawRay(ray, color)


_rl.DrawGrid.argtypes = [c_int, c_float]
_rl.DrawGrid.restype = None
def draw_grid(slices: int, spacing: float) -> None:
    _rl.DrawGrid(slices, spacing)


_rl.DrawGizmo.argtypes = [Vector3]
_rl.DrawGizmo.restype = None
def draw_gizmo(position: Vector3) -> None:
    _rl.DrawGizmo(position)


_rl.LoadModel.argtypes = [c_char_p]
_rl.LoadModel.restype = Model
def load_model(file_name: bytes) -> Model:
    return _rl.LoadModel(file_name)


_rl.LoadModelFromMesh.argtypes = [Mesh]
_rl.LoadModelFromMesh.restype = Model
def load_model_from_mesh(mesh: Mesh) -> Model:
    return _rl.LoadModelFromMesh(mesh)


_rl.UnloadModel.argtypes = [Model]
_rl.UnloadModel.restype = None
def unload_model(model: Model) -> None:
    _rl.UnloadModel(model)


_rl.LoadMeshes.argtypes = [c_char_p, POINTER(c_int)]
_rl.LoadMeshes.restype = POINTER(Mesh)
def load_meshes(file_name: bytes, mesh_count: POINTER(c_int)) -> POINTER(Mesh):
    return _rl.LoadMeshes(file_name, mesh_count)


_rl.ExportMesh.argtypes = [Mesh, c_char_p]
_rl.ExportMesh.restype = None
def export_mesh(mesh: Mesh, file_name: bytes) -> None:
    _rl.ExportMesh(mesh, file_name)


_rl.UnloadMesh.argtypes = [Mesh]
_rl.UnloadMesh.restype = None
def unload_mesh(mesh: Mesh) -> None:
    _rl.UnloadMesh(mesh)


_rl.LoadMaterials.argtypes = [c_char_p, POINTER(c_int)]
_rl.LoadMaterials.restype = POINTER(Material)
def load_materials(file_name: bytes, material_count: POINTER(c_int)) -> POINTER(Material):
    return _rl.LoadMaterials(file_name, material_count)


_rl.LoadMaterialDefault.argtypes = []
_rl.LoadMaterialDefault.restype = Material
def load_material_default() -> Material:
    return _rl.LoadMaterialDefault()


_rl.UnloadMaterial.argtypes = [Material]
_rl.UnloadMaterial.restype = None
def unload_material(material: Material) -> None:
    _rl.UnloadMaterial(material)


_rl.SetMaterialTexture.argtypes = [POINTER(Material), c_int, Texture2D]
_rl.SetMaterialTexture.restype = None
def set_material_texture(material: POINTER(Material), map_type: int, texture: Texture2D) -> None:
    _rl.SetMaterialTexture(material, map_type, texture)


_rl.SetModelMeshMaterial.argtypes = [POINTER(Model), c_int, c_int]
_rl.SetModelMeshMaterial.restype = None
def set_model_mesh_material(model: POINTER(Model), mesh_id: int, material_id: int) -> None:
    _rl.SetModelMeshMaterial(model, mesh_id, material_id)


_rl.LoadModelAnimations.argtypes = [c_char_p, POINTER(c_int)]
_rl.LoadModelAnimations.restype = POINTER(ModelAnimation)
def load_model_animations(file_name: bytes, anims_count: POINTER(c_int)) -> POINTER(ModelAnimation):
    return _rl.LoadModelAnimations(file_name, anims_count)


_rl.UpdateModelAnimation.argtypes = [Model, ModelAnimation, c_int]
_rl.UpdateModelAnimation.restype = None
def update_model_animation(model: Model, anim: ModelAnimation, frame: int) -> None:
    _rl.UpdateModelAnimation(model, anim, frame)


_rl.UnloadModelAnimation.argtypes = [ModelAnimation]
_rl.UnloadModelAnimation.restype = None
def unload_model_animation(anim: ModelAnimation) -> None:
    _rl.UnloadModelAnimation(anim)


_rl.IsModelAnimationValid.argtypes = [Model, ModelAnimation]
_rl.IsModelAnimationValid.restype = c_bool
def is_model_animation_valid(model: Model, anim: ModelAnimation) -> bool:
    return _rl.IsModelAnimationValid(model, anim)


_rl.GenMeshPoly.argtypes = [c_int, c_float]
_rl.GenMeshPoly.restype = Mesh
def gen_mesh_poly(sides: int, radius: float) -> Mesh:
    return _rl.GenMeshPoly(sides, radius)


_rl.GenMeshPlane.argtypes = [c_float, c_float, c_int, c_int]
_rl.GenMeshPlane.restype = Mesh
def gen_mesh_plane(width: float, length: float, res_x: int, res_z: int) -> Mesh:
    return _rl.GenMeshPlane(width, length, res_x, res_z)


_rl.GenMeshCube.argtypes = [c_float, c_float, c_float]
_rl.GenMeshCube.restype = Mesh
def gen_mesh_cube(width: float, height: float, length: float) -> Mesh:
    return _rl.GenMeshCube(width, height, length)


_rl.GenMeshSphere.argtypes = [c_float, c_int, c_int]
_rl.GenMeshSphere.restype = Mesh
def gen_mesh_sphere(radius: float, rings: int, slices: int) -> Mesh:
    return _rl.GenMeshSphere(radius, rings, slices)


_rl.GenMeshHemiSphere.argtypes = [c_float, c_int, c_int]
_rl.GenMeshHemiSphere.restype = Mesh
def gen_mesh_hemi_sphere(radius: float, rings: int, slices: int) -> Mesh:
    return _rl.GenMeshHemiSphere(radius, rings, slices)


_rl.GenMeshCylinder.argtypes = [c_float, c_float, c_int]
_rl.GenMeshCylinder.restype = Mesh
def gen_mesh_cylinder(radius: float, height: float, slices: int) -> Mesh:
    return _rl.GenMeshCylinder(radius, height, slices)


_rl.GenMeshTorus.argtypes = [c_float, c_float, c_int, c_int]
_rl.GenMeshTorus.restype = Mesh
def gen_mesh_torus(radius: float, size: float, rad_seg: int, sides: int) -> Mesh:
    return _rl.GenMeshTorus(radius, size, rad_seg, sides)


_rl.GenMeshKnot.argtypes = [c_float, c_float, c_int, c_int]
_rl.GenMeshKnot.restype = Mesh
def gen_mesh_knot(radius: float, size: float, rad_seg: int, sides: int) -> Mesh:
    return _rl.GenMeshKnot(radius, size, rad_seg, sides)


_rl.GenMeshHeightmap.argtypes = [Image, Vector3]
_rl.GenMeshHeightmap.restype = Mesh
def gen_mesh_heightmap(heightmap: Image, size: Vector3) -> Mesh:
    return _rl.GenMeshHeightmap(heightmap, size)


_rl.GenMeshCubicmap.argtypes = [Image, Vector3]
_rl.GenMeshCubicmap.restype = Mesh
def gen_mesh_cubicmap(cubicmap: Image, cube_size: Vector3) -> Mesh:
    return _rl.GenMeshCubicmap(cubicmap, cube_size)


_rl.MeshBoundingBox.argtypes = [Mesh]
_rl.MeshBoundingBox.restype = BoundingBox
def mesh_bounding_box(mesh: Mesh) -> BoundingBox:
    return _rl.MeshBoundingBox(mesh)


_rl.MeshTangents.argtypes = [POINTER(Mesh)]
_rl.MeshTangents.restype = None
def mesh_tangents(mesh: POINTER(Mesh)) -> None:
    _rl.MeshTangents(mesh)


_rl.MeshBinormals.argtypes = [POINTER(Mesh)]
_rl.MeshBinormals.restype = None
def mesh_binormals(mesh: POINTER(Mesh)) -> None:
    _rl.MeshBinormals(mesh)


_rl.DrawModel.argtypes = [Model, Vector3, c_float, Color]
_rl.DrawModel.restype = None
def draw_model(model: Model, position: Vector3, scale: float, tint: Color) -> None:
    _rl.DrawModel(model, position, scale, tint)


_rl.DrawModelEx.argtypes = [Model, Vector3, Vector3, c_float, Vector3, Color]
_rl.DrawModelEx.restype = None
def draw_model_ex(model: Model, position: Vector3, rotation_axis: Vector3, rotation_angle: float, scale: Vector3, tint: Color) -> None:
    _rl.DrawModelEx(model, position, rotation_axis, rotation_angle, scale, tint)


_rl.DrawModelWires.argtypes = [Model, Vector3, c_float, Color]
_rl.DrawModelWires.restype = None
def draw_model_wires(model: Model, position: Vector3, scale: float, tint: Color) -> None:
    _rl.DrawModelWires(model, position, scale, tint)


_rl.DrawModelWiresEx.argtypes = [Model, Vector3, Vector3, c_float, Vector3, Color]
_rl.DrawModelWiresEx.restype = None
def draw_model_wires_ex(model: Model, position: Vector3, rotation_axis: Vector3, rotation_angle: float, scale: Vector3, tint: Color) -> None:
    _rl.DrawModelWiresEx(model, position, rotation_axis, rotation_angle, scale, tint)


_rl.DrawBoundingBox.argtypes = [BoundingBox, Color]
_rl.DrawBoundingBox.restype = None
def draw_bounding_box(box: BoundingBox, color: Color) -> None:
    _rl.DrawBoundingBox(box, color)


_rl.DrawBillboard.argtypes = [Camera, Texture2D, Vector3, c_float, Color]
_rl.DrawBillboard.restype = None
def draw_billboard(camera: Camera, texture: Texture2D, center: Vector3, size: float, tint: Color) -> None:
    _rl.DrawBillboard(camera, texture, center, size, tint)


_rl.DrawBillboardRec.argtypes = [Camera, Texture2D, Rectangle, Vector3, c_float, Color]
_rl.DrawBillboardRec.restype = None
def draw_billboard_rec(camera: Camera, texture: Texture2D, source_rec: Rectangle, center: Vector3, size: float, tint: Color) -> None:
    _rl.DrawBillboardRec(camera, texture, source_rec, center, size, tint)


_rl.CheckCollisionSpheres.argtypes = [Vector3, c_float, Vector3, c_float]
_rl.CheckCollisionSpheres.restype = c_bool
def check_collision_spheres(center_a: Vector3, radius_a: float, center_b: Vector3, radius_b: float) -> bool:
    return _rl.CheckCollisionSpheres(center_a, radius_a, center_b, radius_b)


_rl.CheckCollisionBoxes.argtypes = [BoundingBox, BoundingBox]
_rl.CheckCollisionBoxes.restype = c_bool
def check_collision_boxes(box1: BoundingBox, box2: BoundingBox) -> bool:
    return _rl.CheckCollisionBoxes(box1, box2)


_rl.CheckCollisionBoxSphere.argtypes = [BoundingBox, Vector3, c_float]
_rl.CheckCollisionBoxSphere.restype = c_bool
def check_collision_box_sphere(box: BoundingBox, center: Vector3, radius: float) -> bool:
    return _rl.CheckCollisionBoxSphere(box, center, radius)


_rl.CheckCollisionRaySphere.argtypes = [Ray, Vector3, c_float]
_rl.CheckCollisionRaySphere.restype = c_bool
def check_collision_ray_sphere(ray: Ray, center: Vector3, radius: float) -> bool:
    return _rl.CheckCollisionRaySphere(ray, center, radius)


_rl.CheckCollisionRaySphereEx.argtypes = [Ray, Vector3, c_float, POINTER(Vector3)]
_rl.CheckCollisionRaySphereEx.restype = c_bool
def check_collision_ray_sphere_ex(ray: Ray, center: Vector3, radius: float, collision_point: POINTER(Vector3)) -> bool:
    return _rl.CheckCollisionRaySphereEx(ray, center, radius, collision_point)


_rl.CheckCollisionRayBox.argtypes = [Ray, BoundingBox]
_rl.CheckCollisionRayBox.restype = c_bool
def check_collision_ray_box(ray: Ray, box: BoundingBox) -> bool:
    return _rl.CheckCollisionRayBox(ray, box)


_rl.GetCollisionRayModel.argtypes = [Ray, Model]
_rl.GetCollisionRayModel.restype = RayHitInfo
def get_collision_ray_model(ray: Ray, model: Model) -> RayHitInfo:
    return _rl.GetCollisionRayModel(ray, model)


_rl.GetCollisionRayTriangle.argtypes = [Ray, Vector3, Vector3, Vector3]
_rl.GetCollisionRayTriangle.restype = RayHitInfo
def get_collision_ray_triangle(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3) -> RayHitInfo:
    return _rl.GetCollisionRayTriangle(ray, p1, p2, p3)


_rl.GetCollisionRayGround.argtypes = [Ray, c_float]
_rl.GetCollisionRayGround.restype = RayHitInfo
def get_collision_ray_ground(ray: Ray, ground_height: float) -> RayHitInfo:
    return _rl.GetCollisionRayGround(ray, ground_height)


_rl.LoadText.argtypes = [c_char_p]
_rl.LoadText.restype = c_char_p
def load_text(file_name: bytes) -> bytes:
    return _rl.LoadText(file_name)


_rl.LoadShader.argtypes = [c_char_p, c_char_p]
_rl.LoadShader.restype = Shader
def load_shader(vs_file_name: bytes, fs_file_name: bytes) -> Shader:
    return _rl.LoadShader(vs_file_name, fs_file_name)


_rl.LoadShaderCode.argtypes = [c_char_p, c_char_p]
_rl.LoadShaderCode.restype = Shader
def load_shader_code(vs_code: bytes, fs_code: bytes) -> Shader:
    return _rl.LoadShaderCode(vs_code, fs_code)


_rl.UnloadShader.argtypes = [Shader]
_rl.UnloadShader.restype = None
def unload_shader(shader: Shader) -> None:
    _rl.UnloadShader(shader)


_rl.GetShaderDefault.argtypes = []
_rl.GetShaderDefault.restype = Shader
def get_shader_default() -> Shader:
    return _rl.GetShaderDefault()


_rl.GetTextureDefault.argtypes = []
_rl.GetTextureDefault.restype = Texture2D
def get_texture_default() -> Texture2D:
    return _rl.GetTextureDefault()


_rl.GetShaderLocation.argtypes = [Shader, c_char_p]
_rl.GetShaderLocation.restype = c_int
def get_shader_location(shader: Shader, uniform_name: bytes) -> int:
    return _rl.GetShaderLocation(shader, uniform_name)


_rl.SetShaderValue.argtypes = [Shader, c_int, c_void_p, c_int]
_rl.SetShaderValue.restype = None
def set_shader_value(shader: Shader, uniform_loc: int, value: int, uniform_type: int) -> None:
    _rl.SetShaderValue(shader, uniform_loc, value, uniform_type)


_rl.SetShaderValueV.argtypes = [Shader, c_int, c_void_p, c_int, c_int]
_rl.SetShaderValueV.restype = None
def set_shader_value_v(shader: Shader, uniform_loc: int, value: int, uniform_type: int, count: int) -> None:
    _rl.SetShaderValueV(shader, uniform_loc, value, uniform_type, count)


_rl.SetShaderValueMatrix.argtypes = [Shader, c_int, Matrix]
_rl.SetShaderValueMatrix.restype = None
def set_shader_value_matrix(shader: Shader, uniform_loc: int, mat: Matrix) -> None:
    _rl.SetShaderValueMatrix(shader, uniform_loc, mat)


_rl.SetShaderValueTexture.argtypes = [Shader, c_int, Texture2D]
_rl.SetShaderValueTexture.restype = None
def set_shader_value_texture(shader: Shader, uniform_loc: int, texture: Texture2D) -> None:
    _rl.SetShaderValueTexture(shader, uniform_loc, texture)


_rl.SetMatrixProjection.argtypes = [Matrix]
_rl.SetMatrixProjection.restype = None
def set_matrix_projection(proj: Matrix) -> None:
    _rl.SetMatrixProjection(proj)


_rl.SetMatrixModelview.argtypes = [Matrix]
_rl.SetMatrixModelview.restype = None
def set_matrix_modelview(view: Matrix) -> None:
    _rl.SetMatrixModelview(view)


_rl.GetMatrixModelview.argtypes = []
_rl.GetMatrixModelview.restype = Matrix
def get_matrix_modelview() -> Matrix:
    return _rl.GetMatrixModelview()


_rl.GetMatrixProjection.argtypes = []
_rl.GetMatrixProjection.restype = Matrix
def get_matrix_projection() -> Matrix:
    return _rl.GetMatrixProjection()


_rl.GenTextureCubemap.argtypes = [Shader, Texture2D, c_int]
_rl.GenTextureCubemap.restype = Texture2D
def gen_texture_cubemap(shader: Shader, map: Texture2D, size: int) -> Texture2D:
    return _rl.GenTextureCubemap(shader, map, size)


_rl.GenTextureIrradiance.argtypes = [Shader, Texture2D, c_int]
_rl.GenTextureIrradiance.restype = Texture2D
def gen_texture_irradiance(shader: Shader, cubemap: Texture2D, size: int) -> Texture2D:
    return _rl.GenTextureIrradiance(shader, cubemap, size)


_rl.GenTexturePrefilter.argtypes = [Shader, Texture2D, c_int]
_rl.GenTexturePrefilter.restype = Texture2D
def gen_texture_prefilter(shader: Shader, cubemap: Texture2D, size: int) -> Texture2D:
    return _rl.GenTexturePrefilter(shader, cubemap, size)


_rl.GenTextureBRDF.argtypes = [Shader, c_int]
_rl.GenTextureBRDF.restype = Texture2D
def gen_texture_brdf(shader: Shader, size: int) -> Texture2D:
    return _rl.GenTextureBRDF(shader, size)


_rl.BeginShaderMode.argtypes = [Shader]
_rl.BeginShaderMode.restype = None
def begin_shader_mode(shader: Shader) -> None:
    _rl.BeginShaderMode(shader)


_rl.EndShaderMode.argtypes = []
_rl.EndShaderMode.restype = None
def end_shader_mode() -> None:
    _rl.EndShaderMode()


_rl.BeginBlendMode.argtypes = [c_int]
_rl.BeginBlendMode.restype = None
def begin_blend_mode(mode: int) -> None:
    _rl.BeginBlendMode(mode)


_rl.EndBlendMode.argtypes = []
_rl.EndBlendMode.restype = None
def end_blend_mode() -> None:
    _rl.EndBlendMode()


_rl.InitVrSimulator.argtypes = []
_rl.InitVrSimulator.restype = None
def init_vr_simulator() -> None:
    _rl.InitVrSimulator()


_rl.CloseVrSimulator.argtypes = []
_rl.CloseVrSimulator.restype = None
def close_vr_simulator() -> None:
    _rl.CloseVrSimulator()


_rl.UpdateVrTracking.argtypes = [POINTER(Camera)]
_rl.UpdateVrTracking.restype = None
def update_vr_tracking(camera: POINTER(Camera)) -> None:
    _rl.UpdateVrTracking(camera)


_rl.SetVrConfiguration.argtypes = [VrDeviceInfo, Shader]
_rl.SetVrConfiguration.restype = None
def set_vr_configuration(info: VrDeviceInfo, distortion: Shader) -> None:
    _rl.SetVrConfiguration(info, distortion)


_rl.IsVrSimulatorReady.argtypes = []
_rl.IsVrSimulatorReady.restype = c_bool
def is_vr_simulator_ready() -> bool:
    return _rl.IsVrSimulatorReady()


_rl.ToggleVrMode.argtypes = []
_rl.ToggleVrMode.restype = None
def toggle_vr_mode() -> None:
    _rl.ToggleVrMode()


_rl.BeginVrDrawing.argtypes = []
_rl.BeginVrDrawing.restype = None
def begin_vr_drawing() -> None:
    _rl.BeginVrDrawing()


_rl.EndVrDrawing.argtypes = []
_rl.EndVrDrawing.restype = None
def end_vr_drawing() -> None:
    _rl.EndVrDrawing()


_rl.InitAudioDevice.argtypes = []
_rl.InitAudioDevice.restype = None
def init_audio_device() -> None:
    _rl.InitAudioDevice()


_rl.CloseAudioDevice.argtypes = []
_rl.CloseAudioDevice.restype = None
def close_audio_device() -> None:
    _rl.CloseAudioDevice()


_rl.IsAudioDeviceReady.argtypes = []
_rl.IsAudioDeviceReady.restype = c_bool
def is_audio_device_ready() -> bool:
    return _rl.IsAudioDeviceReady()


_rl.SetMasterVolume.argtypes = [c_float]
_rl.SetMasterVolume.restype = None
def set_master_volume(volume: float) -> None:
    _rl.SetMasterVolume(volume)


_rl.LoadWave.argtypes = [c_char_p]
_rl.LoadWave.restype = Wave
def load_wave(file_name: bytes) -> Wave:
    return _rl.LoadWave(file_name)


_rl.LoadSound.argtypes = [c_char_p]
_rl.LoadSound.restype = Sound
def load_sound(file_name: bytes) -> Sound:
    return _rl.LoadSound(file_name)


_rl.LoadSoundFromWave.argtypes = [Wave]
_rl.LoadSoundFromWave.restype = Sound
def load_sound_from_wave(wave: Wave) -> Sound:
    return _rl.LoadSoundFromWave(wave)


_rl.UpdateSound.argtypes = [Sound, c_void_p, c_int]
_rl.UpdateSound.restype = None
def update_sound(sound: Sound, data: int, samples_count: int) -> None:
    _rl.UpdateSound(sound, data, samples_count)


_rl.UnloadWave.argtypes = [Wave]
_rl.UnloadWave.restype = None
def unload_wave(wave: Wave) -> None:
    _rl.UnloadWave(wave)


_rl.UnloadSound.argtypes = [Sound]
_rl.UnloadSound.restype = None
def unload_sound(sound: Sound) -> None:
    _rl.UnloadSound(sound)


_rl.ExportWave.argtypes = [Wave, c_char_p]
_rl.ExportWave.restype = None
def export_wave(wave: Wave, file_name: bytes) -> None:
    _rl.ExportWave(wave, file_name)


_rl.ExportWaveAsCode.argtypes = [Wave, c_char_p]
_rl.ExportWaveAsCode.restype = None
def export_wave_as_code(wave: Wave, file_name: bytes) -> None:
    _rl.ExportWaveAsCode(wave, file_name)


_rl.PlaySound.argtypes = [Sound]
_rl.PlaySound.restype = None
def play_sound(sound: Sound) -> None:
    _rl.PlaySound(sound)


_rl.StopSound.argtypes = [Sound]
_rl.StopSound.restype = None
def stop_sound(sound: Sound) -> None:
    _rl.StopSound(sound)


_rl.PauseSound.argtypes = [Sound]
_rl.PauseSound.restype = None
def pause_sound(sound: Sound) -> None:
    _rl.PauseSound(sound)


_rl.ResumeSound.argtypes = [Sound]
_rl.ResumeSound.restype = None
def resume_sound(sound: Sound) -> None:
    _rl.ResumeSound(sound)


_rl.PlaySoundMulti.argtypes = [Sound]
_rl.PlaySoundMulti.restype = None
def play_sound_multi(sound: Sound) -> None:
    _rl.PlaySoundMulti(sound)


_rl.StopSoundMulti.argtypes = []
_rl.StopSoundMulti.restype = None
def stop_sound_multi() -> None:
    _rl.StopSoundMulti()


_rl.GetSoundsPlaying.argtypes = []
_rl.GetSoundsPlaying.restype = c_int
def get_sounds_playing() -> int:
    return _rl.GetSoundsPlaying()


_rl.IsSoundPlaying.argtypes = [Sound]
_rl.IsSoundPlaying.restype = c_bool
def is_sound_playing(sound: Sound) -> bool:
    return _rl.IsSoundPlaying(sound)


_rl.SetSoundVolume.argtypes = [Sound, c_float]
_rl.SetSoundVolume.restype = None
def set_sound_volume(sound: Sound, volume: float) -> None:
    _rl.SetSoundVolume(sound, volume)


_rl.SetSoundPitch.argtypes = [Sound, c_float]
_rl.SetSoundPitch.restype = None
def set_sound_pitch(sound: Sound, pitch: float) -> None:
    _rl.SetSoundPitch(sound, pitch)


_rl.WaveFormat.argtypes = [POINTER(Wave), c_int, c_int, c_int]
_rl.WaveFormat.restype = None
def wave_format(wave: POINTER(Wave), sample_rate: int, sample_size: int, channels: int) -> None:
    _rl.WaveFormat(wave, sample_rate, sample_size, channels)


_rl.WaveCopy.argtypes = [Wave]
_rl.WaveCopy.restype = Wave
def wave_copy(wave: Wave) -> Wave:
    return _rl.WaveCopy(wave)


_rl.WaveCrop.argtypes = [POINTER(Wave), c_int, c_int]
_rl.WaveCrop.restype = None
def wave_crop(wave: POINTER(Wave), init_sample: int, final_sample: int) -> None:
    _rl.WaveCrop(wave, init_sample, final_sample)


_rl.GetWaveData.argtypes = [Wave]
_rl.GetWaveData.restype = POINTER(c_float)
def get_wave_data(wave: Wave) -> POINTER(c_float):
    return _rl.GetWaveData(wave)


_rl.LoadMusicStream.argtypes = [c_char_p]
_rl.LoadMusicStream.restype = Music
def load_music_stream(file_name: bytes) -> Music:
    return _rl.LoadMusicStream(file_name)


_rl.UnloadMusicStream.argtypes = [Music]
_rl.UnloadMusicStream.restype = None
def unload_music_stream(music: Music) -> None:
    _rl.UnloadMusicStream(music)


_rl.PlayMusicStream.argtypes = [Music]
_rl.PlayMusicStream.restype = None
def play_music_stream(music: Music) -> None:
    _rl.PlayMusicStream(music)


_rl.UpdateMusicStream.argtypes = [Music]
_rl.UpdateMusicStream.restype = None
def update_music_stream(music: Music) -> None:
    _rl.UpdateMusicStream(music)


_rl.StopMusicStream.argtypes = [Music]
_rl.StopMusicStream.restype = None
def stop_music_stream(music: Music) -> None:
    _rl.StopMusicStream(music)


_rl.PauseMusicStream.argtypes = [Music]
_rl.PauseMusicStream.restype = None
def pause_music_stream(music: Music) -> None:
    _rl.PauseMusicStream(music)


_rl.ResumeMusicStream.argtypes = [Music]
_rl.ResumeMusicStream.restype = None
def resume_music_stream(music: Music) -> None:
    _rl.ResumeMusicStream(music)


_rl.IsMusicPlaying.argtypes = [Music]
_rl.IsMusicPlaying.restype = c_bool
def is_music_playing(music: Music) -> bool:
    return _rl.IsMusicPlaying(music)


_rl.SetMusicVolume.argtypes = [Music, c_float]
_rl.SetMusicVolume.restype = None
def set_music_volume(music: Music, volume: float) -> None:
    _rl.SetMusicVolume(music, volume)


_rl.SetMusicPitch.argtypes = [Music, c_float]
_rl.SetMusicPitch.restype = None
def set_music_pitch(music: Music, pitch: float) -> None:
    _rl.SetMusicPitch(music, pitch)


_rl.SetMusicLoopCount.argtypes = [Music, c_int]
_rl.SetMusicLoopCount.restype = None
def set_music_loop_count(music: Music, count: int) -> None:
    _rl.SetMusicLoopCount(music, count)


_rl.GetMusicTimeLength.argtypes = [Music]
_rl.GetMusicTimeLength.restype = c_float
def get_music_time_length(music: Music) -> float:
    return _rl.GetMusicTimeLength(music)


_rl.GetMusicTimePlayed.argtypes = [Music]
_rl.GetMusicTimePlayed.restype = c_float
def get_music_time_played(music: Music) -> float:
    return _rl.GetMusicTimePlayed(music)


_rl.InitAudioStream.argtypes = [c_uint, c_uint, c_uint]
_rl.InitAudioStream.restype = AudioStream
def init_audio_stream(sample_rate: int, sample_size: int, channels: int) -> AudioStream:
    return _rl.InitAudioStream(sample_rate, sample_size, channels)


_rl.UpdateAudioStream.argtypes = [AudioStream, c_void_p, c_int]
_rl.UpdateAudioStream.restype = None
def update_audio_stream(stream: AudioStream, data: int, samples_count: int) -> None:
    _rl.UpdateAudioStream(stream, data, samples_count)


_rl.CloseAudioStream.argtypes = [AudioStream]
_rl.CloseAudioStream.restype = None
def close_audio_stream(stream: AudioStream) -> None:
    _rl.CloseAudioStream(stream)


_rl.IsAudioStreamProcessed.argtypes = [AudioStream]
_rl.IsAudioStreamProcessed.restype = c_bool
def is_audio_stream_processed(stream: AudioStream) -> bool:
    return _rl.IsAudioStreamProcessed(stream)


_rl.PlayAudioStream.argtypes = [AudioStream]
_rl.PlayAudioStream.restype = None
def play_audio_stream(stream: AudioStream) -> None:
    _rl.PlayAudioStream(stream)


_rl.PauseAudioStream.argtypes = [AudioStream]
_rl.PauseAudioStream.restype = None
def pause_audio_stream(stream: AudioStream) -> None:
    _rl.PauseAudioStream(stream)


_rl.ResumeAudioStream.argtypes = [AudioStream]
_rl.ResumeAudioStream.restype = None
def resume_audio_stream(stream: AudioStream) -> None:
    _rl.ResumeAudioStream(stream)


_rl.IsAudioStreamPlaying.argtypes = [AudioStream]
_rl.IsAudioStreamPlaying.restype = c_bool
def is_audio_stream_playing(stream: AudioStream) -> bool:
    return _rl.IsAudioStreamPlaying(stream)


_rl.StopAudioStream.argtypes = [AudioStream]
_rl.StopAudioStream.restype = None
def stop_audio_stream(stream: AudioStream) -> None:
    _rl.StopAudioStream(stream)


_rl.SetAudioStreamVolume.argtypes = [AudioStream, c_float]
_rl.SetAudioStreamVolume.restype = None
def set_audio_stream_volume(stream: AudioStream, volume: float) -> None:
    _rl.SetAudioStreamVolume(stream, volume)


_rl.SetAudioStreamPitch.argtypes = [AudioStream, c_float]
_rl.SetAudioStreamPitch.restype = None
def set_audio_stream_pitch(stream: AudioStream, pitch: float) -> None:
    _rl.SetAudioStreamPitch(stream, pitch)

